<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="classoscit_1_1_value" kind="class" prot="public">
    <compoundname>oscit::Value</compoundname>
    <derivedcompoundref refid="classoscit_1_1_error_value" prot="public" virt="non-virtual">oscit::ErrorValue</derivedcompoundref>
    <derivedcompoundref refid="classoscit_1_1_f_value" prot="public" virt="non-virtual">oscit::FValue</derivedcompoundref>
    <derivedcompoundref refid="classoscit_1_1_hash_value" prot="public" virt="non-virtual">oscit::HashValue</derivedcompoundref>
    <derivedcompoundref refid="classoscit_1_1_json_value" prot="public" virt="non-virtual">oscit::JsonValue</derivedcompoundref>
    <derivedcompoundref refid="classoscit_1_1_list_value" prot="public" virt="non-virtual">oscit::ListValue</derivedcompoundref>
    <derivedcompoundref refid="classoscit_1_1_matrix_value" prot="public" virt="non-virtual">oscit::MatrixValue</derivedcompoundref>
    <derivedcompoundref refid="classoscit_1_1_midi_value" prot="public" virt="non-virtual">oscit::MidiValue</derivedcompoundref>
    <derivedcompoundref refid="classoscit_1_1_real_value" prot="public" virt="non-virtual">oscit::RealValue</derivedcompoundref>
    <derivedcompoundref refid="classoscit_1_1_string_value" prot="public" virt="non-virtual">oscit::StringValue</derivedcompoundref>
    <includes refid="value_8h" local="no">value.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classoscit_1_1_value_1adc570812318d718466dfe76e6fb4edd8" prot="public" static="no">
        <name>@1</name>
        <enumvalue id="classoscit_1_1_value_1adc570812318d718466dfe76e6fb4edd8acca672a09826973dcba73a923d468e1b" prot="public">
          <name>AUTO_STEP</name>
          <initializer>0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="71" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="71" bodyend="71"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classoscit_1_1_value_1a0734e6c07a6433405f3361086b82c477" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceoscit_1a9f19df528648365fd3c442d588100386" kindref="member">ValueType</ref></type>
        <definition>ValueType oscit::Value::type_</definition>
        <argsstring></argsstring>
        <name>type_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="1161" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="1161" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classoscit_1_1_value_1a32817b564b91700888d7b5975a195a53" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceoscit_1aec5e82657ca46d39345c88f07ca2f07e" kindref="member">Real</ref></type>
        <definition>Real oscit::Value::r</definition>
        <argsstring></argsstring>
        <name>r</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Store a single Real number. The value of &apos;Real&apos; can be a float or double depending on compilation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="1168" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="1168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classoscit_1_1_value_1a3ecdffba82bc93192589c125ffaf3882" prot="public" static="no" mutable="no">
        <type><ref refid="classoscit_1_1_string_data" kindref="compound">StringData</ref> *</type>
        <definition>StringData* oscit::Value::string_</definition>
        <argsstring></argsstring>
        <name>string_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pointer to a reference counted std::string. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="1172" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="1172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classoscit_1_1_value_1a88731fb79a70d2761809fc7daf110928" prot="public" static="no" mutable="no">
        <type><ref refid="classoscit_1_1_list" kindref="compound">List</ref> *</type>
        <definition>List* oscit::Value::list_</definition>
        <argsstring></argsstring>
        <name>list_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pointer to a list of values (class <ref refid="classoscit_1_1_list" kindref="compound">List</ref>). The list is reference counted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="1177" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="1177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classoscit_1_1_value_1ae0bfc56b86af6835b08f856a92eb1029" prot="public" static="no" mutable="no">
        <type><ref refid="classoscit_1_1_error" kindref="compound">Error</ref> *</type>
        <definition>Error* oscit::Value::error_</definition>
        <argsstring></argsstring>
        <name>error_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pointer to an <ref refid="classoscit_1_1_error" kindref="compound">Error</ref> (contains an error code and message). The error is reference counted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="1182" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="1182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classoscit_1_1_value_1ae8c6cb40416e48f1e3e9afb2e00195f9" prot="public" static="no" mutable="no">
        <type><ref refid="classoscit_1_1_hash" kindref="compound">Hash</ref> *</type>
        <definition>Hash* oscit::Value::hash_</definition>
        <argsstring></argsstring>
        <name>hash_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pointer to a reference counted dictionary. Use std::string as keys for the dictionary. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="1187" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="1187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classoscit_1_1_value_1a5f135e546bd8f788213b75e5175dbaaa" prot="public" static="no" mutable="no">
        <type><ref refid="classoscit_1_1_matrix" kindref="compound">Matrix</ref> *</type>
        <definition>Matrix* oscit::Value::matrix_</definition>
        <argsstring></argsstring>
        <name>matrix_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pointer to an opencv matrix (cv::Mat). TODO: reference count matrix_ ! </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="1192" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="1192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classoscit_1_1_value_1aedb8f738311050359d4ff8c3875f7ea0" prot="public" static="no" mutable="no">
        <type><ref refid="classoscit_1_1_midi_message" kindref="compound">MidiMessage</ref> *</type>
        <definition>MidiMessage* oscit::Value::midi_message_</definition>
        <argsstring></argsstring>
        <name>midi_message_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pointer to a reference counted <ref refid="classoscit_1_1_midi_message" kindref="compound">MidiMessage</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="1196" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="1196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classoscit_1_1_value_1ae9c8bf41a5e3a80295a779c0846f8106" prot="public" static="no" mutable="no">
        <type>union oscit::Value::@2</type>
        <definition>union oscit::Value::@2 oscit::Value::@3</definition>
        <argsstring></argsstring>
        <name>@3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="1197"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classoscit_1_1_value_1ab156d3cac4d24872dd02d546a3cc7e22" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>oscit::Value::Value</definition>
        <argsstring>()</argsstring>
        <name>Value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>========================================================= Empty </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="74" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="74" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a5c7877c342caa1fd5b97757f459b6586" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>oscit::Value::Value</definition>
        <argsstring>(Real real)</argsstring>
        <name>Value</name>
        <param>
          <type><ref refid="namespaceoscit_1aec5e82657ca46d39345c88f07ca2f07e" kindref="member">Real</ref></type>
          <declname>real</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>========================================================= Real </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="78" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="78" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1ab99a95ff3023995997927f2fcf195ee0" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>oscit::Value::Value</definition>
        <argsstring>(int number)</argsstring>
        <name>Value</name>
        <param>
          <type>int</type>
          <declname>number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="80" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a126208bf34029d1bcec314944ff8db36" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>oscit::Value::Value</definition>
        <argsstring>(const char *string)</argsstring>
        <name>Value</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>========================================================= String </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="83" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="83" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1ab1a1631fd43d15902777bb0df7f39a45" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>oscit::Value::Value</definition>
        <argsstring>(const std::string &amp;string)</argsstring>
        <name>Value</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="87" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="87" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1af9262a2f4c6dcef07fb81c482fca945f" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>oscit::Value::Value</definition>
        <argsstring>(const List *list)</argsstring>
        <name>Value</name>
        <param>
          <type>const <ref refid="classoscit_1_1_list" kindref="compound">List</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>========================================================= <ref refid="classoscit_1_1_list" kindref="compound">List</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="92" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="92" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a09cf9d848cba084a0538b58ebce684d9" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>oscit::Value::Value</definition>
        <argsstring>(const List &amp;list)</argsstring>
        <name>Value</name>
        <param>
          <type>const <ref refid="classoscit_1_1_list" kindref="compound">List</ref> &amp;</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="96" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="96" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1abefc695daa295644ee47b07a1da25c8f" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>oscit::Value::Value</definition>
        <argsstring>(ErrorCode code, const char *str)</argsstring>
        <name>Value</name>
        <param>
          <type><ref refid="namespaceoscit_1ab80f9f57bfa30aea952660b674e576c9" kindref="member">ErrorCode</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>========================================================= <ref refid="classoscit_1_1_error" kindref="compound">Error</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="101" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="101" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a7c89efcd3da602708deb422517a3ece2" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>oscit::Value::Value</definition>
        <argsstring>(ErrorCode code, const std::string &amp;str)</argsstring>
        <name>Value</name>
        <param>
          <type><ref refid="namespaceoscit_1ab80f9f57bfa30aea952660b674e576c9" kindref="member">ErrorCode</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="105" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="105" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1ae357e6191cec0662080b452952d6abbc" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>oscit::Value::Value</definition>
        <argsstring>(const Hash *hash)</argsstring>
        <name>Value</name>
        <param>
          <type>const <ref refid="classoscit_1_1_hash" kindref="compound">Hash</ref> *</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>========================================================= <ref refid="classoscit_1_1_hash" kindref="compound">Hash</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="110" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="110" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a5b81e48657cdd159f72e8903091dec80" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>oscit::Value::Value</definition>
        <argsstring>(const Hash &amp;hash)</argsstring>
        <name>Value</name>
        <param>
          <type>const <ref refid="classoscit_1_1_hash" kindref="compound">Hash</ref> &amp;</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="114" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="114" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1acad9eeb3edf05842f7c5fd2e6c4ee996" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>oscit::Value::Value</definition>
        <argsstring>(size_t rows, size_t cols, int type, void *data, size_t step=AUTO_STEP)</argsstring>
        <name>Value</name>
        <param>
          <type>size_t</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>step</declname>
          <defval>AUTO_STEP</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>========================================================= <ref refid="classoscit_1_1_matrix" kindref="compound">Matrix</ref> This is the easiest way to create a matrix from existing data. Please read opencv docs for information Create a new matrix value pointing to user-allocated data. If this matrix is further assigned to another value, an error will be raised since the data is not reference counted.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows in the data (height) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para>number of columns in the data (width) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>an integer representing a MatrixType of the data that is stored </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the user-allocated data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>step</parametername>
</parameternamelist>
<parameterdescription>
<para>number of <bold>bytes</bold> to advance from one row to the other. If the value is <computeroutput>AUTO_STEP</computeroutput>, the number of bytes will be calculated from the type and number of columns. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="135"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a36d3554275144ee88ebdf838e06770e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>oscit::Value::Value</definition>
        <argsstring>(size_t rows, size_t cols, int type)</argsstring>
        <name>Value</name>
        <param>
          <type>size_t</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new matrix value of the given size and type.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows (height) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para>number of columns (width) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>an integer representing the MagicType </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="144"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1ac6afc2ce0db7a55879dd4baaff78ac37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>oscit::Value::Value</definition>
        <argsstring>(size_t rows, size_t cols)</argsstring>
        <name>Value</name>
        <param>
          <type>size_t</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>cols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new matrix of Real values of the given size.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para>number of columns </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="151"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1ad7ff2b475f978c8745386a154c621a86" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>oscit::Value::Value</definition>
        <argsstring>(const Matrix *matrix)</argsstring>
        <name>Value</name>
        <param>
          <type>const <ref refid="classoscit_1_1_matrix" kindref="compound">Matrix</ref> *</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> by making a copy of the header of the provided matrix (shared data). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="155" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="155" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1ad90a83e90fbe990baddfa2a0ee74d91e" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>oscit::Value::Value</definition>
        <argsstring>(const Matrix &amp;matrix)</argsstring>
        <name>Value</name>
        <param>
          <type>const <ref refid="classoscit_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> by making a copy of the header of the provided matrix (shared data). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="161" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="161" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1ae444fbffc8b4a4034d9097859a38285b" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>oscit::Value::Value</definition>
        <argsstring>(const MidiMessage *midi_message)</argsstring>
        <name>Value</name>
        <param>
          <type>const <ref refid="classoscit_1_1_midi_message" kindref="compound">MidiMessage</ref> *</type>
          <declname>midi_message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>========================================================= Midi </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="167" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="167" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1aaf2c8031f0414d65236a84aaeca65b45" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>oscit::Value::Value</definition>
        <argsstring>(const MidiMessage &amp;midi_message)</argsstring>
        <name>Value</name>
        <param>
          <type>const <ref refid="classoscit_1_1_midi_message" kindref="compound">MidiMessage</ref> &amp;</type>
          <declname>midi_message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="171" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="171" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a93e5b47bad97d2e073fadd0df06f10a0" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>oscit::Value::Value</definition>
        <argsstring>(TypeTag type_tag)</argsstring>
        <name>Value</name>
        <param>
          <type><ref refid="structoscit_1_1_type_tag" kindref="compound">TypeTag</ref></type>
          <declname>type_tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>========================================================= Any Create a value from a <ref refid="structoscit_1_1_type_tag" kindref="compound">TypeTag</ref> string. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="177" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="177" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a6a143805c656ea80df06ba3f1020c9c0" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>oscit::Value::Value</definition>
        <argsstring>(const Json &amp;json)</argsstring>
        <name>Value</name>
        <param>
          <type>const <ref refid="classoscit_1_1_json" kindref="compound">Json</ref> &amp;</type>
          <declname>json</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a value by parsing a JSON string. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="182" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="182" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a8306e0da7ca6de793aaf994569bc4cd2" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>oscit::Value::Value</definition>
        <argsstring>(char type_char)</argsstring>
        <name>Value</name>
        <param>
          <type>char</type>
          <declname>type_char</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a default value from a type character like &apos;f&apos;. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="187" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="187" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a894b5e514b3a1bc32a267335efe60da7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>oscit::Value::Value</definition>
        <argsstring>(const Value &amp;value)</argsstring>
        <name>Value</name>
        <param>
          <type>const <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy constructor (needed since many methods return a <ref refid="classoscit_1_1_value" kindref="compound">Value</ref>). FIXME: !!! This is making a copy, not sharing the other content. Once we have good copy-on-write semantics, replace with &apos;share&apos;. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="195" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="195" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1acc7f55f15947aaa79563d42106136588" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>oscit::Value::~Value</definition>
        <argsstring>()</argsstring>
        <name>~Value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="199" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="199" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a987981f06ba8310d0e646a91a3f75f95" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value&amp; oscit::Value::set</definition>
        <argsstring>(const Value &amp;other)</argsstring>
        <name>set</name>
        <param>
          <type>const <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Share the content of another <ref refid="classoscit_1_1_value" kindref="compound">Value</ref>. TODO: use &apos;const&apos; to select between &apos;share&apos; and &apos;copy&apos; ? FIXME: we are sharing a &apos;const&apos; ! Solution: const <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> = const xxx ==&gt; share <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> = const xxx ==&gt; copy first </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="210" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="210" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a6f172d8c752304c21ebf0bcd6e10ba74" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value&amp; oscit::Value::copy</definition>
        <argsstring>(const Value &amp;other)</argsstring>
        <name>copy</name>
        <param>
          <type>const <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy the content of another <ref refid="classoscit_1_1_value" kindref="compound">Value</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="270" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="270" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a706cd9556533a8f4e0ff5240a52a552c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void oscit::Value::operator=</definition>
        <argsstring>(const Value &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy the content of the other value. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="316" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="316" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a132cc568e777cce8b5919f56aefe98ff" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool oscit::Value::operator==</definition>
        <argsstring>(const Value &amp;other) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true if the two objects have the same type and contain identical values. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="323" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="323" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1ad3957c79a0e83ffe44779de729f23480" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool oscit::Value::operator!=</definition>
        <argsstring>(const Value &amp;other) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="344" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="344" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1ab7d211f552dfcddab03b682072da6bde" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* oscit::Value::type_tag</definition>
        <argsstring>() const </argsstring>
        <name>type_tag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="348" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="348" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a542f39cd139aa63919a300f1b230dc1c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceoscit_1acdd0211767952c9d583a6206c38dbd5f" kindref="member">TypeTagID</ref></type>
        <definition>TypeTagID oscit::Value::type_id</definition>
        <argsstring>() const </argsstring>
        <name>type_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="366" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="366" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a29bfa5a815b37b0a5cd9b1ed1a914378" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceoscit_1a9f19df528648365fd3c442d588100386" kindref="member">ValueType</ref></type>
        <definition>ValueType oscit::Value::type</definition>
        <argsstring>() const </argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="384" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="384" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a2cf8ebd5c1bc4768969efc2cf3bc6468" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t oscit::Value::build_from_json</definition>
        <argsstring>(const char *json, bool strict_mode=false)</argsstring>
        <name>build_from_json</name>
        <param>
          <type>const char *</type>
          <declname>json</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>strict_mode</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Build the content of the value from the characters in the buffer until NULL. <simplesect kind="return"><para>number of characters eaten in the buffer to build <ref refid="classoscit_1_1_value" kindref="compound">Value</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="391"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1ae3d5767bace8d213e1fc4403205c5d79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void oscit::Value::unpack</definition>
        <argsstring>(const std::string &amp;key, const Value &amp;data)</argsstring>
        <name>unpack</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Build value by unpacking a special key and serialized data (used when deserializing custom objects form <ref refid="classoscit_1_1_json" kindref="compound">Json</ref>). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="396"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a080790b1872424a01764ff5b0135ed46" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classoscit_1_1_json" kindref="compound">Json</ref></type>
        <definition>Json oscit::Value::to_json</definition>
        <argsstring>() const </argsstring>
        <name>to_json</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a string representation of the value. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="399"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a55e268056f33bc50174934446bee0f04" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classoscit_1_1_json" kindref="compound">Json</ref></type>
        <definition>Json oscit::Value::lazy_json</definition>
        <argsstring>() const </argsstring>
        <name>lazy_json</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a lazy json string representation of the value. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="402"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1aa6edfaed10be09bcc603cdc111a708f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void oscit::Value::set_type</definition>
        <argsstring>(ValueType type)</argsstring>
        <name>set_type</name>
        <param>
          <type><ref refid="namespaceoscit_1a9f19df528648365fd3c442d588100386" kindref="member">ValueType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change the <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> into the specific type. Since a default value must be set, it is better to use &apos;set&apos;. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="406" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="406" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a9eb434cf4cf68c0ba0b7de48c059b067" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* oscit::Value::set_type_tag</definition>
        <argsstring>(const char *type_tag)</argsstring>
        <name>set_type_tag</name>
        <param>
          <type>const char *</type>
          <declname>type_tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change the <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> into something defined in a typeTag. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="412" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="412" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1aefaddce7594e50044d9f779e579e9a3c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool oscit::Value::is_empty</definition>
        <argsstring>() const </argsstring>
        <name>is_empty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>========================================================= Empty TODO: rename to &apos;void&apos; ? because empty also means &apos;empty array&apos;... </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="443" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="443" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a6541f1c156bd150637b5f1d524c2b841" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value&amp; oscit::Value::set_empty</definition>
        <argsstring>()</argsstring>
        <name>set_empty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change the value to nil. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="446" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="446" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a2910a16109968d5ec1e8554073d2e6ef" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool oscit::Value::is_nil</definition>
        <argsstring>() const </argsstring>
        <name>is_nil</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>========================================================= Nil </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="452" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="452" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1ac88dcf2d5afb22f439eb43c858d967e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value&amp; oscit::Value::set_nil</definition>
        <argsstring>()</argsstring>
        <name>set_nil</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change the value to nil. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="455" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="455" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1af7bb9ff018a4814963a5bfc7ca632bf9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool oscit::Value::is_true</definition>
        <argsstring>() const </argsstring>
        <name>is_true</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>========================================================= True </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="461" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="461" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a65a04bb9f97bb891afd13cb1b5570c23" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool oscit::Value::is_bang</definition>
        <argsstring>() const </argsstring>
        <name>is_bang</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="462" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="462" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a638051707e3acddc085f0ae7dd918500" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value&amp; oscit::Value::set_true</definition>
        <argsstring>()</argsstring>
        <name>set_true</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change the value to nil. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="465" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="465" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a55fdbfbf3012a4be38d644678205ed8b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool oscit::Value::is_false</definition>
        <argsstring>() const </argsstring>
        <name>is_false</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>========================================================= False </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="472" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="472" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a0e802c571897b74614b3266bd0aa9e4d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value&amp; oscit::Value::set_false</definition>
        <argsstring>()</argsstring>
        <name>set_false</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change the value to nil. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="475" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="475" bodyend="478"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a2ecb230a2c852cfbaa3be4578fd83768" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool oscit::Value::is_real</definition>
        <argsstring>() const </argsstring>
        <name>is_real</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>========================================================= Real </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="481" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="481" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a5adff5a7390282249c0082dacdaaf708" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value&amp; oscit::Value::set</definition>
        <argsstring>(Real real)</argsstring>
        <name>set</name>
        <param>
          <type><ref refid="namespaceoscit_1aec5e82657ca46d39345c88f07ca2f07e" kindref="member">Real</ref></type>
          <declname>real</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change the <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> into a <ref refid="classoscit_1_1_real_value" kindref="compound">RealValue</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="484" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="484" bodyend="488"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1ab5e186e317817c71f6bedd0cb23b5ef9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceoscit_1aec5e82657ca46d39345c88f07ca2f07e" kindref="member">Real</ref></type>
        <definition>Real oscit::Value::get_real</definition>
        <argsstring>(Real default_result=0) const </argsstring>
        <name>get_real</name>
        <param>
          <type><ref refid="namespaceoscit_1aec5e82657ca46d39345c88f07ca2f07e" kindref="member">Real</ref></type>
          <declname>default_result</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Safe accessor for Real value. returns the default value if the current <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> is not a real number. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="493" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="493" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a6e52b09be3be2ccb2114bd80f3d35b9a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool oscit::Value::is_string</definition>
        <argsstring>() const </argsstring>
        <name>is_string</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>========================================================= String </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="498" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="498" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a9a5fdfa0c73b8b4e1b43556ab007b637" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value&amp; oscit::Value::set</definition>
        <argsstring>(const char *string)</argsstring>
        <name>set</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change the <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> into a <ref refid="classoscit_1_1_string_value" kindref="compound">StringValue</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="501" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="501" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a0b62b28a85fea717b1bb01de52baafd2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value&amp; oscit::Value::set</definition>
        <argsstring>(const std::string &amp;string)</argsstring>
        <name>set</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change the <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> into a <ref refid="classoscit_1_1_string_value" kindref="compound">StringValue</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="508" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="508" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a0e4a89cb5f8a0155f6a1fbd760a8346f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value&amp; oscit::Value::append</definition>
        <argsstring>(const std::string &amp;string)</argsstring>
        <name>append</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="514" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="514" bodyend="516"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a761e6d5cc05e09d9e07df09b640ebef4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value&amp; oscit::Value::append</definition>
        <argsstring>(const char *str)</argsstring>
        <name>append</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="518" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="518" bodyend="525"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a8ce62f1cacddc9760a5424b20008ca8b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; oscit::Value::str</definition>
        <argsstring>() const </argsstring>
        <name>str</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="527" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="527" bodyend="529"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1afb8da07c1ca88d63af054be5a53bf2f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string &amp;</type>
        <definition>std::string&amp; oscit::Value::str</definition>
        <argsstring>()</argsstring>
        <name>str</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="531" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="531" bodyend="533"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a278b2a5b5d9bdb5e42985abd22222a93" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* oscit::Value::c_str</definition>
        <argsstring>() const </argsstring>
        <name>c_str</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="535" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="535" bodyend="537"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1af1b65e86f0a3bc9df2da1d09fcba4284" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref></type>
        <definition>Value oscit::Value::split</definition>
        <argsstring>(char c) const </argsstring>
        <name>split</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Split the string with the given character. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>the character to use for string splitting </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classoscit_1_1_list_value" kindref="compound">ListValue</ref> with one or more strings </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="543"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a5e14205f79d4e48073371d1e264dbc21" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref></type>
        <definition>Value oscit::Value::split</definition>
        <argsstring>(const char *str) const </argsstring>
        <name>split</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Split the string with the given character. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to use for splitting </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classoscit_1_1_list_value" kindref="compound">ListValue</ref> with one or more strings </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="549"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a0d3230848ad6ac63aa9244353d833fc8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool oscit::Value::is_list</definition>
        <argsstring>() const </argsstring>
        <name>is_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>========================================================= <ref refid="classoscit_1_1_list" kindref="compound">List</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="552" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="552" bodyend="552"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a7e4e008b0eaa1c66fcfd0ea276aa35fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value&amp; oscit::Value::set</definition>
        <argsstring>(const List *list)</argsstring>
        <name>set</name>
        <param>
          <type>const <ref refid="classoscit_1_1_list" kindref="compound">List</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change the <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> into a <ref refid="classoscit_1_1_list" kindref="compound">List</ref> by copying the content of the argument. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="555" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="555" bodyend="559"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1addeda82b9c659afd5493be9b35ae5659" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value&amp; oscit::Value::set</definition>
        <argsstring>(const List &amp;list)</argsstring>
        <name>set</name>
        <param>
          <type>const <ref refid="classoscit_1_1_list" kindref="compound">List</ref> &amp;</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change the <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> into a <ref refid="classoscit_1_1_list" kindref="compound">List</ref> by copying the content of the argument. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="562" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="562" bodyend="566"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1acce4f95243a7addf8f5b1dfcb2d73c89" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>const Value&amp; oscit::Value::operator[]</definition>
        <argsstring>(size_t pos) const </argsstring>
        <name>operator[]</name>
        <param>
          <type>size_t</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="568" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="568" bodyend="570"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a77699b9234935a41a61d7809d8183da0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value&amp; oscit::Value::operator[]</definition>
        <argsstring>(size_t pos)</argsstring>
        <name>operator[]</name>
        <param>
          <type>size_t</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="572" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="572" bodyend="574"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1af8280013dc2dac6228daebbbf555ca46" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>const Value&amp; oscit::Value::value_at</definition>
        <argsstring>(size_t pos) const </argsstring>
        <name>value_at</name>
        <param>
          <type>size_t</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="576" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="576" bodyend="578"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a8325ea3703d08fb2f11ffd4e027f4112" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value&amp; oscit::Value::value_at</definition>
        <argsstring>(size_t pos)</argsstring>
        <name>value_at</name>
        <param>
          <type>size_t</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="580" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="580" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1aeec9663152b7d4f554cccf6871ede08a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>const Value&amp; oscit::Value::last</definition>
        <argsstring>() const </argsstring>
        <name>last</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="584" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="584" bodyend="591"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a4aa51ce81c6d8a8a264ef167951ddf9f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>const Value&amp; oscit::Value::first</definition>
        <argsstring>() const </argsstring>
        <name>first</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="593" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="593" bodyend="600"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1ad2f5102e06b71162739fb76273ab2515" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void oscit::Value::set_value_at</definition>
        <argsstring>(size_t pos, const Value &amp;val)</argsstring>
        <name>set_value_at</name>
        <param>
          <type>size_t</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="602" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="602" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a70a898041b70b6de022a93e87810c1e1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t oscit::Value::size</definition>
        <argsstring>() const </argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="607" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="607" bodyend="609"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1aa6e78f38f6999c6867d15dfd2cb4b77b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value&amp; oscit::Value::push_back</definition>
        <argsstring>(const T &amp;elem)</argsstring>
        <name>push_back</name>
        <param>
          <type>const T &amp;</type>
          <declname>elem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="612" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="612" bodyend="614"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1ad7493a7617cbe5f06c37cae6d17dbbce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value&amp; oscit::Value::push_back</definition>
        <argsstring>(const Value &amp;val)</argsstring>
        <name>push_back</name>
        <param>
          <type>const <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="616"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a00f5f261fca5f0a37edab7e2f16b495b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value&amp; oscit::Value::push_front</definition>
        <argsstring>(const T &amp;elem)</argsstring>
        <name>push_front</name>
        <param>
          <type>const T &amp;</type>
          <declname>elem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="619" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="619" bodyend="621"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a37f12fb892a43f1597e0e63f29a2a796" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value&amp; oscit::Value::push_front</definition>
        <argsstring>(const Value &amp;val)</argsstring>
        <name>push_front</name>
        <param>
          <type>const <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="623"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1af8f456d979c8b7bf05ebc006c60872c8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref></type>
        <definition>Value oscit::Value::join</definition>
        <argsstring>(char c) const </argsstring>
        <name>join</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Join the strings in the list with the given character. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the character to join elements with </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classoscit_1_1_string_value" kindref="compound">StringValue</ref> with the result of the join operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="629"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a67da80b90745754fc579469d111e96e9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref></type>
        <definition>Value oscit::Value::join</definition>
        <argsstring>(const char *str) const </argsstring>
        <name>join</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Join the strings in the list with the given string. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to join elements with </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classoscit_1_1_string_value" kindref="compound">StringValue</ref> with the result of the join operation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="635"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a49aefc14ebd88febb6ba6712f870f159" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool oscit::Value::is_error</definition>
        <argsstring>() const </argsstring>
        <name>is_error</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true if the list&apos;s type tags start with the given sequence. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>========================================================= <ref refid="classoscit_1_1_error" kindref="compound">Error</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="646" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="646" bodyend="646"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a32dea682781603ca73e40587f01f24a5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool oscit::Value::contains_error</definition>
        <argsstring>() const </argsstring>
        <name>contains_error</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true if any of enclosed values contains an error. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="650" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="650" bodyend="660"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a6ee16fcd1b3bdc5858b45f3f69b44a7b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value&amp; oscit::Value::set</definition>
        <argsstring>(ErrorCode code, const char *string)</argsstring>
        <name>set</name>
        <param>
          <type><ref refid="namespaceoscit_1ab80f9f57bfa30aea952660b674e576c9" kindref="member">ErrorCode</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change the <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> into an <ref refid="classoscit_1_1_error_value" kindref="compound">ErrorValue</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="663" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="663" bodyend="667"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a36a1caedbeaf70a6bf233fbfdec0c9b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value&amp; oscit::Value::set</definition>
        <argsstring>(ErrorCode code, const std::string &amp;string)</argsstring>
        <name>set</name>
        <param>
          <type><ref refid="namespaceoscit_1ab80f9f57bfa30aea952660b674e576c9" kindref="member">ErrorCode</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change the <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> into an <ref refid="classoscit_1_1_error_value" kindref="compound">ErrorValue</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="670" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="670" bodyend="674"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a3902b3bb5199b0066de00881494aa6ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value&amp; oscit::Value::set</definition>
        <argsstring>(const Error *error)</argsstring>
        <name>set</name>
        <param>
          <type>const <ref refid="classoscit_1_1_error" kindref="compound">Error</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change the <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> into a <ref refid="classoscit_1_1_list_value" kindref="compound">ListValue</ref> by copying the content of the argument. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="677" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="677" bodyend="681"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a6d623bd605229c7e2aee1e34175a2dcc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value&amp; oscit::Value::set</definition>
        <argsstring>(const Error &amp;error)</argsstring>
        <name>set</name>
        <param>
          <type>const <ref refid="classoscit_1_1_error" kindref="compound">Error</ref> &amp;</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change the <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> into a <ref refid="classoscit_1_1_list_value" kindref="compound">ListValue</ref> by copying the content of the argument. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="684" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="684" bodyend="688"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a30310b4140c23e4269f9fb968f9fd585" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; oscit::Value::error_message</definition>
        <argsstring>() const </argsstring>
        <name>error_message</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="690" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="690" bodyend="692"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a4cf765669298088e228cf841fb7eb78c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceoscit_1ab80f9f57bfa30aea952660b674e576c9" kindref="member">ErrorCode</ref></type>
        <definition>ErrorCode oscit::Value::error_code</definition>
        <argsstring>() const </argsstring>
        <name>error_code</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="694" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="694" bodyend="696"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1ac44a8de3831a89a92059bfb97cf25b86" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool oscit::Value::is_hash</definition>
        <argsstring>() const </argsstring>
        <name>is_hash</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>========================================================= <ref refid="classoscit_1_1_hash" kindref="compound">Hash</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="699" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="699" bodyend="699"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1af40da1fb22ac53165b38ec48fc3adac9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value&amp; oscit::Value::set</definition>
        <argsstring>(const Hash *hash)</argsstring>
        <name>set</name>
        <param>
          <type>const <ref refid="classoscit_1_1_hash" kindref="compound">Hash</ref> *</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change the <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> into a <ref refid="classoscit_1_1_hash_value" kindref="compound">HashValue</ref> by copying the content of the argument. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="702" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="702" bodyend="706"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a9079fb2911c8703d6ce7f1b37e91d41c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value&amp; oscit::Value::set</definition>
        <argsstring>(const Hash &amp;hash)</argsstring>
        <name>set</name>
        <param>
          <type>const <ref refid="classoscit_1_1_hash" kindref="compound">Hash</ref> &amp;</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change the <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> into a <ref refid="classoscit_1_1_hash_value" kindref="compound">HashValue</ref> by copying the content of the argument. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="709" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="709" bodyend="713"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a7c30a8a47ce3a2ede19a28d2faeeec9e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value&amp; oscit::Value::set</definition>
        <argsstring>(const char *key, const T &amp;val)</argsstring>
        <name>set</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="717" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="717" bodyend="719"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a730b25eee3ac426d7a4175e5e723b1f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value&amp; oscit::Value::set</definition>
        <argsstring>(const std::string &amp;key, const T &amp;val)</argsstring>
        <name>set</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="722" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="722" bodyend="724"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a4fcf0a497700902ad69a10a875d8a557" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value&amp; oscit::Value::set</definition>
        <argsstring>(const std::string &amp;key, const Value &amp;val)</argsstring>
        <name>set</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="726" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="726" bodyend="735"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a891044e1b9c3a6a7a86b9ef404bc01f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value&amp; oscit::Value::set</definition>
        <argsstring>(const char *key1, const char *key2, const T &amp;val)</argsstring>
        <name>set</name>
        <param>
          <type>const char *</type>
          <declname>key1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key2</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="739" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="739" bodyend="741"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a0f47a09c73aaad7a351a0f4cf1189d84" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value&amp; oscit::Value::set</definition>
        <argsstring>(const std::string &amp;key1, const std::string &amp;key2, const T &amp;val)</argsstring>
        <name>set</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key1</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>key2</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="744" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="744" bodyend="746"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a58f52a1ac3be4e5201cd8c03ce0cece4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value&amp; oscit::Value::set</definition>
        <argsstring>(const std::string &amp;key1, const std::string &amp;key2, const Value &amp;val)</argsstring>
        <name>set</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key1</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>key2</declname>
        </param>
        <param>
          <type>const <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>In-place set a hash value two-levels deep ({key1:{key2:new_value}}). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="750" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="750" bodyend="765"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a67448392b375c8a51fadde7983a6a1c4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool oscit::Value::get</definition>
        <argsstring>(const std::string &amp;key, Value *retval) const </argsstring>
        <name>get</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> *</type>
          <declname>retval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="767" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="767" bodyend="770"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a76b26adae531cedec3fb52cafa0d65db" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceoscit_1a862f7344e3dd363af4be27122b3aba0f" kindref="member">HashIterator</ref></type>
        <definition>HashIterator oscit::Value::begin</definition>
        <argsstring>() const </argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="772" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="772" bodyend="774"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1aba793e68bb2546edacb9f942e80af8f1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceoscit_1a862f7344e3dd363af4be27122b3aba0f" kindref="member">HashIterator</ref></type>
        <definition>HashIterator oscit::Value::end</definition>
        <argsstring>() const </argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="776" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="776" bodyend="778"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a89bdfda825fc5f780c9e9cc4c91cdd4a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classoscit_1_1_value" kindref="compound">Value</ref></type>
        <definition>const Value oscit::Value::operator[]</definition>
        <argsstring>(const std::string &amp;key) const </argsstring>
        <name>operator[]</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="780" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="780" bodyend="788"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a174b56ca568c68878a271a001af32337" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref></type>
        <definition>Value oscit::Value::operator[]</definition>
        <argsstring>(const std::string &amp;key)</argsstring>
        <name>operator[]</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="790" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="790" bodyend="798"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a48e440bb7fbee61f10303ebfabeb333d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classoscit_1_1_value" kindref="compound">Value</ref></type>
        <definition>const Value oscit::Value::operator[]</definition>
        <argsstring>(const char *&amp;key) const </argsstring>
        <name>operator[]</name>
        <param>
          <type>const char *&amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="800" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="800" bodyend="809"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a8935172e0d663fbadc7045f985dddb4e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref></type>
        <definition>Value oscit::Value::operator[]</definition>
        <argsstring>(const char *&amp;key)</argsstring>
        <name>operator[]</name>
        <param>
          <type>const char *&amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="811" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="811" bodyend="820"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a4ae80b5354552dd3849ddfed556c5bbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void oscit::Value::deep_merge</definition>
        <argsstring>(const Value &amp;other)</argsstring>
        <name>deep_merge</name>
        <param>
          <type>const <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Merge &apos;other&apos; hash into the current hash. For example if the current content is {&quot;one&quot;:{&quot;x&quot;:45, &quot;y&quot;:100}, &quot;two&quot;:{...}} and we receive {&quot;one&quot;:{&quot;x&quot;:40}, &quot;two&quot;:null}, the final result will be {&quot;one&quot;:{&quot;x&quot;:40, &quot;y&quot;:100}}. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="827"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a1a8f06d569afff3c40e478870f4309cd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool oscit::Value::has_key</definition>
        <argsstring>(const char *key) const </argsstring>
        <name>has_key</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true if the current value is a hash and it contains an entry for the given key. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="832" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="832" bodyend="835"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1ae940e5ad977876da5837d23cfabe0b9c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool oscit::Value::has_key</definition>
        <argsstring>(const std::string &amp;key) const </argsstring>
        <name>has_key</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true if the current value is a hash and it contains an entry for the given key. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="840" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="840" bodyend="843"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a8675f9c023a72ce44d27c1ad52c65811" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void oscit::Value::remove</definition>
        <argsstring>(const char *key)</argsstring>
        <name>remove</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove entry with the given key. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="847" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="847" bodyend="850"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a19693ba439a3007a9508ff756b16b9f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void oscit::Value::remove</definition>
        <argsstring>(std::string &amp;key)</argsstring>
        <name>remove</name>
        <param>
          <type>std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove entry with the given key. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="854" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="854" bodyend="857"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1acfadbbde8817b8754b75ad7c3dab8350" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool oscit::Value::is_matrix</definition>
        <argsstring>() const </argsstring>
        <name>is_matrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>========================================================= <ref refid="classoscit_1_1_matrix" kindref="compound">Matrix</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="860" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="860" bodyend="860"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1ae4818f55155085cc290cb276857c7826" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoscit_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
        <definition>Matrix&amp; oscit::Value::matrix</definition>
        <argsstring>()</argsstring>
        <name>matrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a reference to the current matrix (no type check). <simplesect kind="return"><para>reference to current matrix </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="865" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="865" bodyend="867"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1ac1445baead9030269a03ae0cb43cc645" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value&amp; oscit::Value::set</definition>
        <argsstring>(const Matrix *matrix)</argsstring>
        <name>set</name>
        <param>
          <type>const <ref refid="classoscit_1_1_matrix" kindref="compound">Matrix</ref> *</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change the <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> into a <ref refid="classoscit_1_1_matrix_value" kindref="compound">MatrixValue</ref> by making a reference to the argument. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="870" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="870" bodyend="874"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a94154ca6958af85d1993062f4002fbe4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoscit_1_1_matrix" kindref="compound">Matrix</ref> *</type>
        <definition>Matrix* oscit::Value::adopt</definition>
        <argsstring>(Matrix *matrix)</argsstring>
        <name>adopt</name>
        <param>
          <type><ref refid="classoscit_1_1_matrix" kindref="compound">Matrix</ref> *</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adopt a given matrix (will be freed on <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> destruction). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="878" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="878" bodyend="882"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1af55871204a79bfe2f23c434dcd1d36d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value&amp; oscit::Value::set</definition>
        <argsstring>(const Matrix &amp;matrix)</argsstring>
        <name>set</name>
        <param>
          <type>const <ref refid="classoscit_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change the <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> into a <ref refid="classoscit_1_1_matrix_value" kindref="compound">MatrixValue</ref> by making a reference to the argument. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="885" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="885" bodyend="889"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a0aad36404780e525d649abddd3f1bde0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t oscit::Value::mat_size</definition>
        <argsstring>() const </argsstring>
        <name>mat_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the matrix size (number of rows * number of columns). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="893"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a3d2fa20555cf007a5e7d0da64bfeb7a4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int oscit::Value::mat_type</definition>
        <argsstring>() const </argsstring>
        <name>mat_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the OpenCV type (CV_32FC1 for example). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="897"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a1efbaeadb018e42d171aeec2f92fb953" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* oscit::Value::mat_data</definition>
        <argsstring>() const </argsstring>
        <name>mat_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a pointer to the first element in the matrix. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="901"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1af43dcc9c60d1cc7350a229a9ed7a2a1d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool oscit::Value::is_midi</definition>
        <argsstring>() const </argsstring>
        <name>is_midi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>========================================================= Midi </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="904" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="904" bodyend="904"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1abdb6e77326fc6b089c4366b3f5265cee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value&amp; oscit::Value::set</definition>
        <argsstring>(const MidiMessage *midi_message)</argsstring>
        <name>set</name>
        <param>
          <type>const <ref refid="classoscit_1_1_midi_message" kindref="compound">MidiMessage</ref> *</type>
          <declname>midi_message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change the <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> into a <ref refid="classoscit_1_1_midi_value" kindref="compound">MidiValue</ref> by making a reference to the argument. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="908" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="908" bodyend="912"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a7ddfbe3beed26250dff9a9f579ef9172" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value&amp; oscit::Value::set</definition>
        <argsstring>(const MidiMessage &amp;midi_message)</argsstring>
        <name>set</name>
        <param>
          <type>const <ref refid="classoscit_1_1_midi_message" kindref="compound">MidiMessage</ref> &amp;</type>
          <declname>midi_message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change the <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> into a <ref refid="classoscit_1_1_midi_message" kindref="compound">MidiMessage</ref> by making a reference to the argument. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="916" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="916" bodyend="920"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a0b853a36a96afd02a9da9a551d9224d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void oscit::Value::set_as_note</definition>
        <argsstring>(unsigned char note, unsigned char velocity=80, unsigned int length=500, unsigned int channel=1, time_t wait=0)</argsstring>
        <name>set_as_note</name>
        <param>
          <type>unsigned char</type>
          <declname>note</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>velocity</declname>
          <defval>80</defval>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>length</declname>
          <defval>500</defval>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>channel</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>time_t</type>
          <declname>wait</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change the <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> into a Midi note. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="929" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="924" bodyend="932"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a9effc3addb778d00da122a8d3046b426" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void oscit::Value::set_as_ctrl</definition>
        <argsstring>(unsigned char ctrl, unsigned char ctrl_value, unsigned int channel=1, time_t wait=0)</argsstring>
        <name>set_as_ctrl</name>
        <param>
          <type>unsigned char</type>
          <declname>ctrl</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>ctrl_value</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>channel</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>time_t</type>
          <declname>wait</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change the <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> into a Midi control change. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="937" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="936" bodyend="940"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a00ead4243bd111301fde1cb58a17af33" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool oscit::Value::is_any</definition>
        <argsstring>() const </argsstring>
        <name>is_any</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>========================================================= Any </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="943" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="943" bodyend="943"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a5cc2dfa6bbf64775b06eef096a938d46" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value&amp; oscit::Value::set_any</definition>
        <argsstring>()</argsstring>
        <name>set_any</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change the value to nil. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="946" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="946" bodyend="949"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a740233e7dd3d1dc3205f8e1e9b99fb13" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value&amp; oscit::Value::set</definition>
        <argsstring>(const Json &amp;json)</argsstring>
        <name>set</name>
        <param>
          <type>const <ref refid="classoscit_1_1_json" kindref="compound">Json</ref> &amp;</type>
          <declname>json</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a value by parsing a JSON string. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="952" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="952" bodyend="956"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a55730688ace9d84e184a185488a7b813" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void oscit::Value::to_stream</definition>
        <argsstring>(std::ostream &amp;out_stream, bool lazy=false) const </argsstring>
        <name>to_stream</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out_stream</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>lazy</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print value into the given stream. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out_stream</parametername>
</parameternamelist>
<parameterdescription>
<para>std stream to print value in </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lazy</parametername>
</parameternamelist>
<parameterdescription>
<para>print mode (lazy = unparsable json but can be easier to read) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="962"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a82e6350b6ddd6dab49cb14b336086106" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value&amp; oscit::Value::operator&lt;&lt;</definition>
        <argsstring>(const T &amp;val)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="965" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="965" bodyend="978"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1aa3c2d04be2f1ee207c9d96a49f1dd75c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value&amp; oscit::Value::operator&lt;&lt;</definition>
        <argsstring>(const char *str)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="980" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="980" bodyend="989"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a6bca97360933aebeef2f69bb154c077e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value&amp; oscit::Value::operator&lt;&lt;</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="991" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="991" bodyend="1000"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classoscit_1_1_value_1a99972ee09df805ce12fed826e9ff70ea" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceoscit_1a9f19df528648365fd3c442d588100386" kindref="member">ValueType</ref></type>
        <definition>static ValueType oscit::Value::type_from_char</definition>
        <argsstring>(char c)</argsstring>
        <name>type_from_char</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="424" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="424" bodyend="438"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classoscit_1_1_value_1a1f5e00cbf404ff5086042c1ada5b7415" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void oscit::Value::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the value to nil and release/free contained data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="1004" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="1004" bodyend="1028"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1afb99323ea7123e85607dc61c897572ef" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void oscit::Value::set_type_without_default</definition>
        <argsstring>(ValueType type)</argsstring>
        <name>set_type_without_default</name>
        <param>
          <type><ref refid="namespaceoscit_1a9f19df528648365fd3c442d588100386" kindref="member">ValueType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change the <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> into the specific type. Does not set any default value so the object must be considered uninitialized. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="1032" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="1032" bodyend="1035"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1ac33ee5ea52e6af59bbe6c1095ff8aca7" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void oscit::Value::set_default</definition>
        <argsstring>()</argsstring>
        <name>set_default</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Properly initialize the type with a default value. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="1038" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="1038" bodyend="1064"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a681ab1c7d2c84408aff99225f50ad1af" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void oscit::Value::share</definition>
        <argsstring>(const StringData *string)</argsstring>
        <name>share</name>
        <param>
          <type>const <ref refid="classoscit_1_1_string_data" kindref="compound">StringData</ref> *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>========================================================= String </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="1068" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="1068" bodyend="1074"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a40cee28c06cf9e33b0bbf40682813021" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void oscit::Value::set_string</definition>
        <argsstring>(const char *string)</argsstring>
        <name>set_string</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="1076" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="1076" bodyend="1078"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1aae280462173bbdf983db8948ce7a686d" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void oscit::Value::set_string</definition>
        <argsstring>(const std::string &amp;string)</argsstring>
        <name>set_string</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="1080" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="1080" bodyend="1082"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a95402a9be24f1c1a3d78a155f67b4913" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void oscit::Value::share</definition>
        <argsstring>(const Error *error)</argsstring>
        <name>share</name>
        <param>
          <type>const <ref refid="classoscit_1_1_error" kindref="compound">Error</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>========================================================= <ref refid="classoscit_1_1_error" kindref="compound">Error</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="1085" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="1085" bodyend="1091"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a96c8701742e4fbc218dfad7b01f259a6" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void oscit::Value::set_error</definition>
        <argsstring>(ErrorCode code, const char *string)</argsstring>
        <name>set_error</name>
        <param>
          <type><ref refid="namespaceoscit_1ab80f9f57bfa30aea952660b674e576c9" kindref="member">ErrorCode</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set error content. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="1094" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="1094" bodyend="1096"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a12a623118268488fcb3cf3abf54737a9" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void oscit::Value::set_error</definition>
        <argsstring>(const Error *error)</argsstring>
        <name>set_error</name>
        <param>
          <type>const <ref refid="classoscit_1_1_error" kindref="compound">Error</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set error content. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="1099" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="1099" bodyend="1101"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a732012275f507c487c14884f94c9e9d0" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void oscit::Value::share</definition>
        <argsstring>(const List *list)</argsstring>
        <name>share</name>
        <param>
          <type>const <ref refid="classoscit_1_1_list" kindref="compound">List</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>========================================================= <ref refid="classoscit_1_1_list" kindref="compound">List</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="1104" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="1104" bodyend="1110"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1aa147997bba69cedc37a4d9d1a1e475c3" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void oscit::Value::set_list</definition>
        <argsstring>(const List *list)</argsstring>
        <name>set_list</name>
        <param>
          <type>const <ref refid="classoscit_1_1_list" kindref="compound">List</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set <ref refid="classoscit_1_1_list" kindref="compound">List</ref> content by making a copy. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="1113" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="1113" bodyend="1115"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a7ccf1895735fca3bc741f48edf4a401d" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void oscit::Value::share</definition>
        <argsstring>(const Hash *hash)</argsstring>
        <name>share</name>
        <param>
          <type>const <ref refid="classoscit_1_1_hash" kindref="compound">Hash</ref> *</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>========================================================= <ref refid="classoscit_1_1_hash" kindref="compound">Hash</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="1118" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="1118" bodyend="1124"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a31759544a8ad15f0d17ad7731dda8ff7" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void oscit::Value::set_hash</definition>
        <argsstring>(const Hash *hash)</argsstring>
        <name>set_hash</name>
        <param>
          <type>const <ref refid="classoscit_1_1_hash" kindref="compound">Hash</ref> *</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set hash content. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="1127" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="1127" bodyend="1129"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1aa3af9b41a49dcd52a1f7bfaf5070267e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void oscit::Value::set_matrix</definition>
        <argsstring>(const Matrix *matrix)</argsstring>
        <name>set_matrix</name>
        <param>
          <type>const <ref refid="classoscit_1_1_matrix" kindref="compound">Matrix</ref> *</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>========================================================= <ref refid="classoscit_1_1_matrix" kindref="compound">Matrix</ref> Set matrix content. <ref refid="classoscit_1_1_matrix" kindref="compound">Matrix</ref> data is automatically shared through opencv&apos;s reference counting mechanism. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="1135"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1ab8ff836f027eb57ac4da1dab7a660316" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classoscit_1_1_matrix" kindref="compound">Matrix</ref> *</type>
        <definition>Matrix* oscit::Value::build_matrix</definition>
        <argsstring>()</argsstring>
        <name>build_matrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="1140"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1aa8164540a84859038e3f41a0ff0eba7d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void oscit::Value::delete_matrix</definition>
        <argsstring>()</argsstring>
        <name>delete_matrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="1145"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1af36050305544e81359658387c832a3dd" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void oscit::Value::share</definition>
        <argsstring>(const MidiMessage *midi_message)</argsstring>
        <name>share</name>
        <param>
          <type>const <ref refid="classoscit_1_1_midi_message" kindref="compound">MidiMessage</ref> *</type>
          <declname>midi_message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>========================================================= Midi </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="1148" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="1148" bodyend="1154"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_value_1a7a004979188135751e1b263eb72fbff5" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void oscit::Value::set_midi</definition>
        <argsstring>(const MidiMessage *midi_message)</argsstring>
        <name>set_midi</name>
        <param>
          <type>const <ref refid="classoscit_1_1_midi_message" kindref="compound">MidiMessage</ref> *</type>
          <declname>midi_message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set hash content. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="1157" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="1157" bodyend="1159"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> is the base type of all data transmitted between objects or used as parameters and return values for osc messages.</para><para>Nil vs Empty: Empty means &quot;not initialized&quot;, Nil means &quot;initialized to &apos;no value&apos;&quot;. If you pass Empty as a parameter it will be considered the same as Nil (root does a cast). </para>    </detaileddescription>
    <inheritancegraph>
      <node id="1487">
        <label>oscit::RealValue</label>
        <link refid="classoscit_1_1_real_value"/>
        <childnode refid="1479" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1482">
        <label>oscit::HashValue</label>
        <link refid="classoscit_1_1_hash_value"/>
        <childnode refid="1479" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1481">
        <label>oscit::FValue</label>
        <link refid="classoscit_1_1_f_value"/>
        <childnode refid="1479" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1484">
        <label>oscit::ListValue</label>
        <link refid="classoscit_1_1_list_value"/>
        <childnode refid="1479" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1479">
        <label>oscit::Value</label>
        <link refid="classoscit_1_1_value"/>
      </node>
      <node id="1480">
        <label>oscit::ErrorValue</label>
        <link refid="classoscit_1_1_error_value"/>
        <childnode refid="1479" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1488">
        <label>oscit::StringValue</label>
        <link refid="classoscit_1_1_string_value"/>
        <childnode refid="1479" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1485">
        <label>oscit::MatrixValue</label>
        <link refid="classoscit_1_1_matrix_value"/>
        <childnode refid="1479" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1486">
        <label>oscit::MidiValue</label>
        <link refid="classoscit_1_1_midi_value"/>
        <childnode refid="1479" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1483">
        <label>oscit::JsonValue</label>
        <link refid="classoscit_1_1_json_value"/>
        <childnode refid="1479" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1492">
        <label>oscit::Matrix</label>
        <link refid="classoscit_1_1_matrix"/>
      </node>
      <node id="1495">
        <label>oscit::List</label>
        <link refid="classoscit_1_1_list"/>
        <childnode refid="1491" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1489">
        <label>oscit::Value</label>
        <link refid="classoscit_1_1_value"/>
        <childnode refid="1490" relation="usage">
          <edgelabel>midi_message_</edgelabel>
        </childnode>
        <childnode refid="1492" relation="usage">
          <edgelabel>matrix_</edgelabel>
        </childnode>
        <childnode refid="1493" relation="usage">
          <edgelabel>string_</edgelabel>
        </childnode>
        <childnode refid="1494" relation="usage">
          <edgelabel>error_</edgelabel>
        </childnode>
        <childnode refid="1495" relation="usage">
          <edgelabel>list_</edgelabel>
        </childnode>
        <childnode refid="1496" relation="usage">
          <edgelabel>hash_</edgelabel>
        </childnode>
      </node>
      <node id="1490">
        <label>oscit::MidiMessage</label>
        <link refid="classoscit_1_1_midi_message"/>
        <childnode refid="1491" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1498">
        <label>oscit::THashElement&lt; std::string, Value &gt;</label>
        <link refid="structoscit_1_1_t_hash_element"/>
        <childnode refid="1498" relation="usage">
          <edgelabel>next</edgelabel>
        </childnode>
        <childnode refid="1489" relation="usage">
          <edgelabel>obj</edgelabel>
        </childnode>
      </node>
      <node id="1494">
        <label>oscit::Error</label>
        <link refid="classoscit_1_1_error"/>
        <childnode refid="1491" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1497">
        <label>oscit::THash&lt; std::string, Value &gt;</label>
        <link refid="classoscit_1_1_t_hash"/>
        <childnode refid="1498" relation="usage">
          <edgelabel>thash_table_</edgelabel>
        </childnode>
      </node>
      <node id="1496">
        <label>oscit::Hash</label>
        <link refid="classoscit_1_1_hash"/>
        <childnode refid="1491" relation="public-inheritance">
        </childnode>
        <childnode refid="1497" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1491">
        <label>oscit::ReferenceCounted</label>
        <link refid="classoscit_1_1_reference_counted"/>
      </node>
      <node id="1493">
        <label>oscit::StringData</label>
        <link refid="classoscit_1_1_string_data"/>
        <childnode refid="1491" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/Users/gaspard/git/oscit/include/oscit/value.h" line="68" bodyfile="/Users/gaspard/git/oscit/include/oscit/value.h" bodystart="68" bodyend="1198"/>
    <listofallmembers>
      <member refid="classoscit_1_1_value_1a94154ca6958af85d1993062f4002fbe4" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>adopt</name></member>
      <member refid="classoscit_1_1_value_1a0e4a89cb5f8a0155f6a1fbd760a8346f" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>append</name></member>
      <member refid="classoscit_1_1_value_1a761e6d5cc05e09d9e07df09b640ebef4" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>append</name></member>
      <member refid="classoscit_1_1_value_1adc570812318d718466dfe76e6fb4edd8acca672a09826973dcba73a923d468e1b" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>AUTO_STEP</name></member>
      <member refid="classoscit_1_1_value_1a76b26adae531cedec3fb52cafa0d65db" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>begin</name></member>
      <member refid="classoscit_1_1_value_1a2cf8ebd5c1bc4768969efc2cf3bc6468" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>build_from_json</name></member>
      <member refid="classoscit_1_1_value_1ab8ff836f027eb57ac4da1dab7a660316" prot="protected" virt="non-virtual"><scope>oscit::Value</scope><name>build_matrix</name></member>
      <member refid="classoscit_1_1_value_1a278b2a5b5d9bdb5e42985abd22222a93" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>c_str</name></member>
      <member refid="classoscit_1_1_value_1a1f5e00cbf404ff5086042c1ada5b7415" prot="protected" virt="non-virtual"><scope>oscit::Value</scope><name>clear</name></member>
      <member refid="classoscit_1_1_value_1a32dea682781603ca73e40587f01f24a5" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>contains_error</name></member>
      <member refid="classoscit_1_1_value_1a6f172d8c752304c21ebf0bcd6e10ba74" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>copy</name></member>
      <member refid="classoscit_1_1_value_1a4ae80b5354552dd3849ddfed556c5bbe" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>deep_merge</name></member>
      <member refid="classoscit_1_1_value_1aa8164540a84859038e3f41a0ff0eba7d" prot="protected" virt="non-virtual"><scope>oscit::Value</scope><name>delete_matrix</name></member>
      <member refid="classoscit_1_1_value_1aba793e68bb2546edacb9f942e80af8f1" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>end</name></member>
      <member refid="classoscit_1_1_value_1ae0bfc56b86af6835b08f856a92eb1029" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>error_</name></member>
      <member refid="classoscit_1_1_value_1a4cf765669298088e228cf841fb7eb78c" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>error_code</name></member>
      <member refid="classoscit_1_1_value_1a30310b4140c23e4269f9fb968f9fd585" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>error_message</name></member>
      <member refid="classoscit_1_1_value_1a4aa51ce81c6d8a8a264ef167951ddf9f" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>first</name></member>
      <member refid="classoscit_1_1_value_1a67448392b375c8a51fadde7983a6a1c4" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>get</name></member>
      <member refid="classoscit_1_1_value_1ab5e186e317817c71f6bedd0cb23b5ef9" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>get_real</name></member>
      <member refid="classoscit_1_1_value_1a1a8f06d569afff3c40e478870f4309cd" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>has_key</name></member>
      <member refid="classoscit_1_1_value_1ae940e5ad977876da5837d23cfabe0b9c" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>has_key</name></member>
      <member refid="classoscit_1_1_value_1ae8c6cb40416e48f1e3e9afb2e00195f9" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>hash_</name></member>
      <member refid="classoscit_1_1_value_1a00ead4243bd111301fde1cb58a17af33" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>is_any</name></member>
      <member refid="classoscit_1_1_value_1a65a04bb9f97bb891afd13cb1b5570c23" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>is_bang</name></member>
      <member refid="classoscit_1_1_value_1aefaddce7594e50044d9f779e579e9a3c" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>is_empty</name></member>
      <member refid="classoscit_1_1_value_1a49aefc14ebd88febb6ba6712f870f159" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>is_error</name></member>
      <member refid="classoscit_1_1_value_1a55fdbfbf3012a4be38d644678205ed8b" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>is_false</name></member>
      <member refid="classoscit_1_1_value_1ac44a8de3831a89a92059bfb97cf25b86" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>is_hash</name></member>
      <member refid="classoscit_1_1_value_1a0d3230848ad6ac63aa9244353d833fc8" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>is_list</name></member>
      <member refid="classoscit_1_1_value_1acfadbbde8817b8754b75ad7c3dab8350" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>is_matrix</name></member>
      <member refid="classoscit_1_1_value_1af43dcc9c60d1cc7350a229a9ed7a2a1d" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>is_midi</name></member>
      <member refid="classoscit_1_1_value_1a2910a16109968d5ec1e8554073d2e6ef" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>is_nil</name></member>
      <member refid="classoscit_1_1_value_1a2ecb230a2c852cfbaa3be4578fd83768" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>is_real</name></member>
      <member refid="classoscit_1_1_value_1a6e52b09be3be2ccb2114bd80f3d35b9a" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>is_string</name></member>
      <member refid="classoscit_1_1_value_1af7bb9ff018a4814963a5bfc7ca632bf9" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>is_true</name></member>
      <member refid="classoscit_1_1_value_1af8f456d979c8b7bf05ebc006c60872c8" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>join</name></member>
      <member refid="classoscit_1_1_value_1a67da80b90745754fc579469d111e96e9" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>join</name></member>
      <member refid="classoscit_1_1_value_1aeec9663152b7d4f554cccf6871ede08a" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>last</name></member>
      <member refid="classoscit_1_1_value_1a55e268056f33bc50174934446bee0f04" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>lazy_json</name></member>
      <member refid="classoscit_1_1_value_1a88731fb79a70d2761809fc7daf110928" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>list_</name></member>
      <member refid="classoscit_1_1_value_1a1efbaeadb018e42d171aeec2f92fb953" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>mat_data</name></member>
      <member refid="classoscit_1_1_value_1a0aad36404780e525d649abddd3f1bde0" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>mat_size</name></member>
      <member refid="classoscit_1_1_value_1a3d2fa20555cf007a5e7d0da64bfeb7a4" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>mat_type</name></member>
      <member refid="classoscit_1_1_value_1ae4818f55155085cc290cb276857c7826" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>matrix</name></member>
      <member refid="classoscit_1_1_value_1a5f135e546bd8f788213b75e5175dbaaa" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>matrix_</name></member>
      <member refid="classoscit_1_1_value_1aedb8f738311050359d4ff8c3875f7ea0" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>midi_message_</name></member>
      <member refid="classoscit_1_1_value_1ad3957c79a0e83ffe44779de729f23480" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>operator!=</name></member>
      <member refid="classoscit_1_1_value_1a82e6350b6ddd6dab49cb14b336086106" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>operator&lt;&lt;</name></member>
      <member refid="classoscit_1_1_value_1aa3c2d04be2f1ee207c9d96a49f1dd75c" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>operator&lt;&lt;</name></member>
      <member refid="classoscit_1_1_value_1a6bca97360933aebeef2f69bb154c077e" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>operator&lt;&lt;</name></member>
      <member refid="classoscit_1_1_value_1a706cd9556533a8f4e0ff5240a52a552c" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>operator=</name></member>
      <member refid="classoscit_1_1_value_1a132cc568e777cce8b5919f56aefe98ff" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>operator==</name></member>
      <member refid="classoscit_1_1_value_1acce4f95243a7addf8f5b1dfcb2d73c89" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>operator[]</name></member>
      <member refid="classoscit_1_1_value_1a77699b9234935a41a61d7809d8183da0" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>operator[]</name></member>
      <member refid="classoscit_1_1_value_1a89bdfda825fc5f780c9e9cc4c91cdd4a" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>operator[]</name></member>
      <member refid="classoscit_1_1_value_1a174b56ca568c68878a271a001af32337" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>operator[]</name></member>
      <member refid="classoscit_1_1_value_1a48e440bb7fbee61f10303ebfabeb333d" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>operator[]</name></member>
      <member refid="classoscit_1_1_value_1a8935172e0d663fbadc7045f985dddb4e" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>operator[]</name></member>
      <member refid="classoscit_1_1_value_1aa6e78f38f6999c6867d15dfd2cb4b77b" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>push_back</name></member>
      <member refid="classoscit_1_1_value_1ad7493a7617cbe5f06c37cae6d17dbbce" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>push_back</name></member>
      <member refid="classoscit_1_1_value_1a00f5f261fca5f0a37edab7e2f16b495b" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>push_front</name></member>
      <member refid="classoscit_1_1_value_1a37f12fb892a43f1597e0e63f29a2a796" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>push_front</name></member>
      <member refid="classoscit_1_1_value_1a32817b564b91700888d7b5975a195a53" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>r</name></member>
      <member refid="classoscit_1_1_value_1a8675f9c023a72ce44d27c1ad52c65811" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>remove</name></member>
      <member refid="classoscit_1_1_value_1a19693ba439a3007a9508ff756b16b9f4" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>remove</name></member>
      <member refid="classoscit_1_1_value_1a987981f06ba8310d0e646a91a3f75f95" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>set</name></member>
      <member refid="classoscit_1_1_value_1a5adff5a7390282249c0082dacdaaf708" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>set</name></member>
      <member refid="classoscit_1_1_value_1a9a5fdfa0c73b8b4e1b43556ab007b637" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>set</name></member>
      <member refid="classoscit_1_1_value_1a0b62b28a85fea717b1bb01de52baafd2" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>set</name></member>
      <member refid="classoscit_1_1_value_1a7e4e008b0eaa1c66fcfd0ea276aa35fe" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>set</name></member>
      <member refid="classoscit_1_1_value_1addeda82b9c659afd5493be9b35ae5659" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>set</name></member>
      <member refid="classoscit_1_1_value_1a6ee16fcd1b3bdc5858b45f3f69b44a7b" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>set</name></member>
      <member refid="classoscit_1_1_value_1a36a1caedbeaf70a6bf233fbfdec0c9b1" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>set</name></member>
      <member refid="classoscit_1_1_value_1a3902b3bb5199b0066de00881494aa6ce" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>set</name></member>
      <member refid="classoscit_1_1_value_1a6d623bd605229c7e2aee1e34175a2dcc" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>set</name></member>
      <member refid="classoscit_1_1_value_1af40da1fb22ac53165b38ec48fc3adac9" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>set</name></member>
      <member refid="classoscit_1_1_value_1a9079fb2911c8703d6ce7f1b37e91d41c" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>set</name></member>
      <member refid="classoscit_1_1_value_1a7c30a8a47ce3a2ede19a28d2faeeec9e" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>set</name></member>
      <member refid="classoscit_1_1_value_1a730b25eee3ac426d7a4175e5e723b1f0" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>set</name></member>
      <member refid="classoscit_1_1_value_1a4fcf0a497700902ad69a10a875d8a557" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>set</name></member>
      <member refid="classoscit_1_1_value_1a891044e1b9c3a6a7a86b9ef404bc01f0" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>set</name></member>
      <member refid="classoscit_1_1_value_1a0f47a09c73aaad7a351a0f4cf1189d84" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>set</name></member>
      <member refid="classoscit_1_1_value_1a58f52a1ac3be4e5201cd8c03ce0cece4" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>set</name></member>
      <member refid="classoscit_1_1_value_1ac1445baead9030269a03ae0cb43cc645" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>set</name></member>
      <member refid="classoscit_1_1_value_1af55871204a79bfe2f23c434dcd1d36d0" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>set</name></member>
      <member refid="classoscit_1_1_value_1abdb6e77326fc6b089c4366b3f5265cee" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>set</name></member>
      <member refid="classoscit_1_1_value_1a7ddfbe3beed26250dff9a9f579ef9172" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>set</name></member>
      <member refid="classoscit_1_1_value_1a740233e7dd3d1dc3205f8e1e9b99fb13" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>set</name></member>
      <member refid="classoscit_1_1_value_1a5cc2dfa6bbf64775b06eef096a938d46" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>set_any</name></member>
      <member refid="classoscit_1_1_value_1a9effc3addb778d00da122a8d3046b426" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>set_as_ctrl</name></member>
      <member refid="classoscit_1_1_value_1a0b853a36a96afd02a9da9a551d9224d6" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>set_as_note</name></member>
      <member refid="classoscit_1_1_value_1ac33ee5ea52e6af59bbe6c1095ff8aca7" prot="protected" virt="non-virtual"><scope>oscit::Value</scope><name>set_default</name></member>
      <member refid="classoscit_1_1_value_1a6541f1c156bd150637b5f1d524c2b841" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>set_empty</name></member>
      <member refid="classoscit_1_1_value_1a96c8701742e4fbc218dfad7b01f259a6" prot="protected" virt="non-virtual"><scope>oscit::Value</scope><name>set_error</name></member>
      <member refid="classoscit_1_1_value_1a12a623118268488fcb3cf3abf54737a9" prot="protected" virt="non-virtual"><scope>oscit::Value</scope><name>set_error</name></member>
      <member refid="classoscit_1_1_value_1a0e802c571897b74614b3266bd0aa9e4d" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>set_false</name></member>
      <member refid="classoscit_1_1_value_1a31759544a8ad15f0d17ad7731dda8ff7" prot="protected" virt="non-virtual"><scope>oscit::Value</scope><name>set_hash</name></member>
      <member refid="classoscit_1_1_value_1aa147997bba69cedc37a4d9d1a1e475c3" prot="protected" virt="non-virtual"><scope>oscit::Value</scope><name>set_list</name></member>
      <member refid="classoscit_1_1_value_1aa3af9b41a49dcd52a1f7bfaf5070267e" prot="protected" virt="non-virtual"><scope>oscit::Value</scope><name>set_matrix</name></member>
      <member refid="classoscit_1_1_value_1a7a004979188135751e1b263eb72fbff5" prot="protected" virt="non-virtual"><scope>oscit::Value</scope><name>set_midi</name></member>
      <member refid="classoscit_1_1_value_1ac88dcf2d5afb22f439eb43c858d967e9" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>set_nil</name></member>
      <member refid="classoscit_1_1_value_1a40cee28c06cf9e33b0bbf40682813021" prot="protected" virt="non-virtual"><scope>oscit::Value</scope><name>set_string</name></member>
      <member refid="classoscit_1_1_value_1aae280462173bbdf983db8948ce7a686d" prot="protected" virt="non-virtual"><scope>oscit::Value</scope><name>set_string</name></member>
      <member refid="classoscit_1_1_value_1a638051707e3acddc085f0ae7dd918500" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>set_true</name></member>
      <member refid="classoscit_1_1_value_1aa6edfaed10be09bcc603cdc111a708f1" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>set_type</name></member>
      <member refid="classoscit_1_1_value_1a9eb434cf4cf68c0ba0b7de48c059b067" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>set_type_tag</name></member>
      <member refid="classoscit_1_1_value_1afb99323ea7123e85607dc61c897572ef" prot="protected" virt="non-virtual"><scope>oscit::Value</scope><name>set_type_without_default</name></member>
      <member refid="classoscit_1_1_value_1ad2f5102e06b71162739fb76273ab2515" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>set_value_at</name></member>
      <member refid="classoscit_1_1_value_1a681ab1c7d2c84408aff99225f50ad1af" prot="protected" virt="non-virtual"><scope>oscit::Value</scope><name>share</name></member>
      <member refid="classoscit_1_1_value_1a95402a9be24f1c1a3d78a155f67b4913" prot="protected" virt="non-virtual"><scope>oscit::Value</scope><name>share</name></member>
      <member refid="classoscit_1_1_value_1a732012275f507c487c14884f94c9e9d0" prot="protected" virt="non-virtual"><scope>oscit::Value</scope><name>share</name></member>
      <member refid="classoscit_1_1_value_1a7ccf1895735fca3bc741f48edf4a401d" prot="protected" virt="non-virtual"><scope>oscit::Value</scope><name>share</name></member>
      <member refid="classoscit_1_1_value_1af36050305544e81359658387c832a3dd" prot="protected" virt="non-virtual"><scope>oscit::Value</scope><name>share</name></member>
      <member refid="classoscit_1_1_value_1a70a898041b70b6de022a93e87810c1e1" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>size</name></member>
      <member refid="classoscit_1_1_value_1af1b65e86f0a3bc9df2da1d09fcba4284" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>split</name></member>
      <member refid="classoscit_1_1_value_1a5e14205f79d4e48073371d1e264dbc21" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>split</name></member>
      <member refid="classoscit_1_1_value_1a8ce62f1cacddc9760a5424b20008ca8b" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>str</name></member>
      <member refid="classoscit_1_1_value_1afb8da07c1ca88d63af054be5a53bf2f8" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>str</name></member>
      <member refid="classoscit_1_1_value_1a3ecdffba82bc93192589c125ffaf3882" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>string_</name></member>
      <member refid="classoscit_1_1_value_1a080790b1872424a01764ff5b0135ed46" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>to_json</name></member>
      <member refid="classoscit_1_1_value_1a55730688ace9d84e184a185488a7b813" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>to_stream</name></member>
      <member refid="classoscit_1_1_value_1a29bfa5a815b37b0a5cd9b1ed1a914378" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>type</name></member>
      <member refid="classoscit_1_1_value_1a0734e6c07a6433405f3361086b82c477" prot="protected" virt="non-virtual"><scope>oscit::Value</scope><name>type_</name></member>
      <member refid="classoscit_1_1_value_1a99972ee09df805ce12fed826e9ff70ea" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>type_from_char</name></member>
      <member refid="classoscit_1_1_value_1a542f39cd139aa63919a300f1b230dc1c" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>type_id</name></member>
      <member refid="classoscit_1_1_value_1ab7d211f552dfcddab03b682072da6bde" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>type_tag</name></member>
      <member refid="classoscit_1_1_value_1ae3d5767bace8d213e1fc4403205c5d79" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>unpack</name></member>
      <member refid="classoscit_1_1_value_1ab156d3cac4d24872dd02d546a3cc7e22" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>Value</name></member>
      <member refid="classoscit_1_1_value_1a5c7877c342caa1fd5b97757f459b6586" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>Value</name></member>
      <member refid="classoscit_1_1_value_1ab99a95ff3023995997927f2fcf195ee0" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>Value</name></member>
      <member refid="classoscit_1_1_value_1a126208bf34029d1bcec314944ff8db36" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>Value</name></member>
      <member refid="classoscit_1_1_value_1ab1a1631fd43d15902777bb0df7f39a45" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>Value</name></member>
      <member refid="classoscit_1_1_value_1af9262a2f4c6dcef07fb81c482fca945f" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>Value</name></member>
      <member refid="classoscit_1_1_value_1a09cf9d848cba084a0538b58ebce684d9" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>Value</name></member>
      <member refid="classoscit_1_1_value_1abefc695daa295644ee47b07a1da25c8f" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>Value</name></member>
      <member refid="classoscit_1_1_value_1a7c89efcd3da602708deb422517a3ece2" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>Value</name></member>
      <member refid="classoscit_1_1_value_1ae357e6191cec0662080b452952d6abbc" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>Value</name></member>
      <member refid="classoscit_1_1_value_1a5b81e48657cdd159f72e8903091dec80" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>Value</name></member>
      <member refid="classoscit_1_1_value_1acad9eeb3edf05842f7c5fd2e6c4ee996" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>Value</name></member>
      <member refid="classoscit_1_1_value_1a36d3554275144ee88ebdf838e06770e3" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>Value</name></member>
      <member refid="classoscit_1_1_value_1ac6afc2ce0db7a55879dd4baaff78ac37" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>Value</name></member>
      <member refid="classoscit_1_1_value_1ad7ff2b475f978c8745386a154c621a86" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>Value</name></member>
      <member refid="classoscit_1_1_value_1ad90a83e90fbe990baddfa2a0ee74d91e" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>Value</name></member>
      <member refid="classoscit_1_1_value_1ae444fbffc8b4a4034d9097859a38285b" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>Value</name></member>
      <member refid="classoscit_1_1_value_1aaf2c8031f0414d65236a84aaeca65b45" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>Value</name></member>
      <member refid="classoscit_1_1_value_1a93e5b47bad97d2e073fadd0df06f10a0" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>Value</name></member>
      <member refid="classoscit_1_1_value_1a6a143805c656ea80df06ba3f1020c9c0" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>Value</name></member>
      <member refid="classoscit_1_1_value_1a8306e0da7ca6de793aaf994569bc4cd2" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>Value</name></member>
      <member refid="classoscit_1_1_value_1a894b5e514b3a1bc32a267335efe60da7" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>Value</name></member>
      <member refid="classoscit_1_1_value_1af8280013dc2dac6228daebbbf555ca46" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>value_at</name></member>
      <member refid="classoscit_1_1_value_1a8325ea3703d08fb2f11ffd4e027f4112" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>value_at</name></member>
      <member refid="classoscit_1_1_value_1acc7f55f15947aaa79563d42106136588" prot="public" virt="non-virtual"><scope>oscit::Value</scope><name>~Value</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
