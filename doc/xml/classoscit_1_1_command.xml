<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="classoscit_1_1_command" kind="class" prot="public">
    <compoundname>oscit::Command</compoundname>
    <basecompoundref refid="classoscit_1_1_thread" prot="public" virt="non-virtual">oscit::Thread</basecompoundref>
    <derivedcompoundref refid="classoscit_1_1_osc_command" prot="public" virt="non-virtual">oscit::OscCommand</derivedcompoundref>
    <includes refid="command_8h" local="no">command.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classoscit_1_1_command_1a4966338964dbcd90cba2a6b4bd1b3521" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Root</definition>
        <argsstring></argsstring>
        <name>Root</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/command.h" line="138" bodyfile="/Users/gaspard/git/oscit/include/oscit/command.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classoscit_1_1_command_1a4dcd2aff114d1a9cc923a9cbb1aabe81" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class RootProxy</definition>
        <argsstring></argsstring>
        <name>RootProxy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/command.h" line="139" bodyfile="/Users/gaspard/git/oscit/include/oscit/command.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classoscit_1_1_command_1a92cf49967065f161388462d920e175d2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class CommandTest</definition>
        <argsstring></argsstring>
        <name>CommandTest</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/command.h" line="140" bodyfile="/Users/gaspard/git/oscit/include/oscit/command.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classoscit_1_1_command_1a88e892bece3544d379c69d83ee3f5e6e" prot="protected" static="no" mutable="no">
        <type><ref refid="classoscit_1_1_t_hash" kindref="compound">THash</ref>&lt; std::string, <ref refid="classoscit_1_1_object" kindref="compound">Object</ref> * &gt;</type>
        <definition>THash&lt;std::string, Object*&gt; oscit::Command::remote_objects_</definition>
        <argsstring></argsstring>
        <name>remote_objects_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Contains remote_objects (TODO: purge if no alias and not used...). FIXME: maybe we do not need this since we have RootPoxy... </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/command.h" line="197" bodyfile="/Users/gaspard/git/oscit/include/oscit/command.h" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classoscit_1_1_command_1adfdef7bf6f6015137169119a63166595" prot="protected" static="no" mutable="no">
        <type><ref refid="classoscit_1_1_root" kindref="compound">Root</ref> *</type>
        <definition>Root* oscit::Command::root_</definition>
        <argsstring></argsstring>
        <name>root_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/command.h" line="199" bodyfile="/Users/gaspard/git/oscit/include/oscit/command.h" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classoscit_1_1_command_1a213b745a3507b14283c076decef84604" prot="protected" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t oscit::Command::port_</definition>
        <argsstring></argsstring>
        <name>port_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Connected port. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/command.h" line="203" bodyfile="/Users/gaspard/git/oscit/include/oscit/command.h" bodystart="203" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classoscit_1_1_command_1a11fd1fceb5a9e67f8ff24153e7c46a30" prot="private" static="no" mutable="no">
        <type>const std::string</type>
        <definition>const std::string oscit::Command::protocol_</definition>
        <argsstring></argsstring>
        <name>protocol_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type of protocol this command is responsible for. For example if a command has &apos;http&apos; protocol, then all urls starting with &apos;http://&apos; will be forwarded to this command. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/command.h" line="227" bodyfile="/Users/gaspard/git/oscit/include/oscit/command.h" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classoscit_1_1_command_1afe3551f60e73308b5c318c2822e57980" prot="private" static="no" mutable="no">
        <type>const std::string</type>
        <definition>const std::string oscit::Command::service_type_</definition>
        <argsstring></argsstring>
        <name>service_type_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Service type published by this command. If this value is empty, no service will be published. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/command.h" line="232" bodyfile="/Users/gaspard/git/oscit/include/oscit/command.h" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classoscit_1_1_command_1af61802fc9c318182f0ebd32e2a6c9cc5" prot="private" static="no" mutable="no">
        <type><ref refid="classoscit_1_1_zero_conf_registration" kindref="compound">ZeroConfRegistration</ref> *</type>
        <definition>ZeroConfRegistration* oscit::Command::zeroconf_registration_</definition>
        <argsstring></argsstring>
        <name>zeroconf_registration_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Zeroconf registration thread started when &apos;publish_service()&apos; is called. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/command.h" line="236" bodyfile="/Users/gaspard/git/oscit/include/oscit/command.h" bodystart="236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classoscit_1_1_command_1af5bc686795369b38f60dda59375905b4" prot="private" static="no" mutable="no">
        <type><ref refid="classoscit_1_1_t_hash" kindref="compound">THash</ref>&lt; <ref refid="classoscit_1_1_location" kindref="compound">Location</ref>, <ref refid="classoscit_1_1_root_proxy" kindref="compound">RootProxy</ref> * &gt;</type>
        <definition>THash&lt;Location, RootProxy*&gt; oscit::Command::root_proxies_</definition>
        <argsstring></argsstring>
        <name>root_proxies_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Route for received &apos;/.reply&apos; messages which are sent to the proxy identified by the IP endpoint (origin of the message). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/command.h" line="241" bodyfile="/Users/gaspard/git/oscit/include/oscit/command.h" bodystart="241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classoscit_1_1_command_1a31cf9ebf3c6efeb062f871270c52a8d9" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classoscit_1_1_root_proxy" kindref="compound">RootProxy</ref> * &gt;</type>
        <definition>std::vector&lt;RootProxy*&gt; oscit::Command::root_proxies_vector_</definition>
        <argsstring></argsstring>
        <name>root_proxies_vector_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maintain a list of registered root proxies in a vector to keep them ordered and provide faster access to elements by index (used by GUI). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/command.h" line="246" bodyfile="/Users/gaspard/git/oscit/include/oscit/command.h" bodystart="246" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classoscit_1_1_command_1a70b59ce9486b42456e0197858b905f39" prot="private" static="no" mutable="no">
        <type><ref refid="classoscit_1_1_t_hash" kindref="compound">THash</ref>&lt; <ref refid="classoscit_1_1_location" kindref="compound">Location</ref>, unsigned int &gt;</type>
        <definition>THash&lt;Location, unsigned int&gt; oscit::Command::observers_</definition>
        <argsstring></argsstring>
        <name>observers_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classoscit_1_1_list" kindref="compound">List</ref> of satellites that have registered to get return values. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/command.h" line="250" bodyfile="/Users/gaspard/git/oscit/include/oscit/command.h" bodystart="250" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classoscit_1_1_command_1a70b392e3ac51ccee3ce820368becc73b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>oscit::Command::Command</definition>
        <argsstring>(const char *protocol)</argsstring>
        <name>Command</name>
        <param>
          <type>const char *</type>
          <declname>protocol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/command.h" line="59"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_command_1af193c0c45836ae7bed2f2b9ef6568e85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>oscit::Command::Command</definition>
        <argsstring>(const char *protocol, const char *service_type, uint16_t port)</argsstring>
        <name>Command</name>
        <param>
          <type>const char *</type>
          <declname>protocol</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>service_type</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/command.h" line="61"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_command_1a226db1d0b0072f75dadf24398ba2e2b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>oscit::Command::Command</definition>
        <argsstring>(Root *root, const char *protocol)</argsstring>
        <name>Command</name>
        <param>
          <type><ref refid="classoscit_1_1_root" kindref="compound">Root</ref> *</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>protocol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/command.h" line="63"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_command_1a9c38503c8afca833ce5db5c0f54f7bb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>oscit::Command::Command</definition>
        <argsstring>(Root *root, const char *protocol, const char *service_type, uint16_t port)</argsstring>
        <name>Command</name>
        <param>
          <type><ref refid="classoscit_1_1_root" kindref="compound">Root</ref> *</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>protocol</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>service_type</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/command.h" line="65"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_command_1ab945e18104440e336a0ad4cf440d20f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual oscit::Command::~Command</definition>
        <argsstring>()</argsstring>
        <name>~Command</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/command.h" line="67"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_command_1af728901301393d2a74e1f6f3d8fd4bf2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void oscit::Command::kill</definition>
        <argsstring>()</argsstring>
        <name>kill</name>
        <reimplements refid="classoscit_1_1_thread_1ac14ace1b47f8e36b6105d38c4069d2de">kill</reimplements>
        <reimplementedby refid="classoscit_1_1_osc_command_1a6d0f2a7b6faa718b753c29d5398b18f1">kill</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Kill thread (do not make this a virtual). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/command.h" line="69" bodyfile="/Users/gaspard/git/oscit/include/oscit/command.h" bodystart="69" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_command_1a81f74e6363bdd10f969e3edd4ae31175" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void oscit::Command::start_command</definition>
        <argsstring>()</argsstring>
        <name>start_command</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Start the command in a new thread. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/command.h" line="75" bodyfile="/Users/gaspard/git/oscit/include/oscit/command.h" bodystart="75" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_command_1a89cbe68fec95d8105f45ead7f34d4383" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; oscit::Command::protocol</definition>
        <argsstring>()</argsstring>
        <name>protocol</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/command.h" line="84" bodyfile="/Users/gaspard/git/oscit/include/oscit/command.h" bodystart="84" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_command_1a3b16a321db36dce14529bac5ff8cd92e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void oscit::Command::notify_observers</definition>
        <argsstring>(const char *path, const Value &amp;val)=0</argsstring>
        <name>notify_observers</name>
        <reimplementedby refid="classoscit_1_1_osc_map_command_1af0dc101e7053965f282f3bb342e1ea1a">notify_observers</reimplementedby>
        <reimplementedby refid="classoscit_1_1_osc_command_1a42c83b5c851262720e6f2d12debe89ff">notify_observers</reimplementedby>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send a notification to all observers of this command. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/command.h" line="87"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_command_1a1a7b550f6ddcbe69194c4f7be5978c7e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void oscit::Command::send</definition>
        <argsstring>(const Location &amp;remote_endpoint, const char *path, const Value &amp;val)</argsstring>
        <name>send</name>
        <param>
          <type>const <ref refid="classoscit_1_1_location" kindref="compound">Location</ref> &amp;</type>
          <declname>remote_endpoint</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send a message to a specific path on a remote end point. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/command.h" line="91" bodyfile="/Users/gaspard/git/oscit/include/oscit/command.h" bodystart="91" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_command_1ad4f0a8844c29d34c94a7d4fed92ff5d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void oscit::Command::send</definition>
        <argsstring>(const Url &amp;url, const Value &amp;val)</argsstring>
        <name>send</name>
        <param>
          <type>const <ref refid="classoscit_1_1_url" kindref="compound">Url</ref> &amp;</type>
          <declname>url</declname>
        </param>
        <param>
          <type>const <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send a message to an url. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/command.h" line="97" bodyfile="/Users/gaspard/git/oscit/include/oscit/command.h" bodystart="97" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_command_1a581299bb4c1274dd543b4dc4a4d06e74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool oscit::Command::remote_object</definition>
        <argsstring>(const Url &amp;remote_url, Value *error, ObjectHandle *handle)</argsstring>
        <name>remote_object</name>
        <param>
          <type>const <ref refid="classoscit_1_1_url" kindref="compound">Url</ref> &amp;</type>
          <declname>remote_url</declname>
        </param>
        <param>
          <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> *</type>
          <declname>error</declname>
        </param>
        <param>
          <type><ref refid="classoscit_1_1_object_handle" kindref="compound">ObjectHandle</ref> *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a pointer to an object that can be used to send values to a remote object. The receiver should create an alias for the remote_object (do not keep the pointer). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>remote_url</parametername>
</parameternamelist>
<parameterdescription>
<para>should contain the full url with protocol and domain: osc://video.local/vid/contrast.</para></parameterdescription>
</parameteritem>
</parameterlist>
FIXME: rewrite all this with new &quot;proxy&quot; objects and trees.. ? </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/command.h" line="107"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_command_1a4b897b305e935c8cf58734dac6f882a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t oscit::Command::port</definition>
        <argsstring>()</argsstring>
        <name>port</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/command.h" line="109" bodyfile="/Users/gaspard/git/oscit/include/oscit/command.h" bodystart="109" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_command_1af6251b0ea9670a79aed81d12b428bbb5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T* oscit::Command::adopt_proxy</definition>
        <argsstring>(T *proxy)</argsstring>
        <name>adopt_proxy</name>
        <param>
          <type>T *</type>
          <declname>proxy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adopt a new <ref refid="classoscit_1_1_root_proxy" kindref="compound">RootProxy</ref> and start using it to route messages for its endpoint identifier. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/command.h" line="115" bodyfile="/Users/gaspard/git/oscit/include/oscit/command.h" bodystart="115" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_command_1a9c21ba78ff43955d2e353b585f6766e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classoscit_1_1_root_proxy" kindref="compound">RootProxy</ref> *</type>
        <definition>RootProxy* oscit::Command::find_proxy</definition>
        <argsstring>(const Location &amp;location)</argsstring>
        <name>find_proxy</name>
        <param>
          <type>const <ref refid="classoscit_1_1_location" kindref="compound">Location</ref> &amp;</type>
          <declname>location</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find a proxy from a given location. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/command.h" line="122"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_command_1adb1f2142cbdbf8c3ad4c69c49aa26080" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t oscit::Command::root_proxies_count</definition>
        <argsstring>()</argsstring>
        <name>root_proxies_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the number of root proxies registered for this command. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/command.h" line="126" bodyfile="/Users/gaspard/git/oscit/include/oscit/command.h" bodystart="126" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_command_1ad3e90debf6a11f4c7faf23b155e099dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classoscit_1_1_root_proxy" kindref="compound">RootProxy</ref> *</type>
        <definition>RootProxy* oscit::Command::root_proxy_at_index</definition>
        <argsstring>(size_t index)</argsstring>
        <name>root_proxy_at_index</name>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the root proxy located at a specific index. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/command.h" line="132" bodyfile="/Users/gaspard/git/oscit/include/oscit/command.h" bodystart="132" bodyend="135"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classoscit_1_1_command_1aa685ec9ee1e4b3e7a36d78d2be997c2b" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void oscit::Command::set_port</definition>
        <argsstring>(uint16_t port)</argsstring>
        <name>set_port</name>
        <param>
          <type>uint16_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Used by sub-classes when they finally know the port. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/command.h" line="144" bodyfile="/Users/gaspard/git/oscit/include/oscit/command.h" bodystart="144" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_command_1a75f3f19b243873c75f167bbefe4dd056" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void oscit::Command::register_proxy</definition>
        <argsstring>(RootProxy *proxy)</argsstring>
        <name>register_proxy</name>
        <param>
          <type><ref refid="classoscit_1_1_root_proxy" kindref="compound">RootProxy</ref> *</type>
          <declname>proxy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>We have just adopted this proxy: start routing &apos;reply&apos; messages to it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/command.h" line="150"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_command_1a13388867c17c7a6b6140b340cb0627d4" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void oscit::Command::unregister_proxy</definition>
        <argsstring>(RootProxy *proxy)</argsstring>
        <name>unregister_proxy</name>
        <param>
          <type><ref refid="classoscit_1_1_root_proxy" kindref="compound">RootProxy</ref> *</type>
          <declname>proxy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Forget about this proxy: stop sending content of &apos;reply&apos; messages to it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/command.h" line="154"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_command_1a82283a6a862f215f963ca19da9a91311" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void oscit::Command::publish_service</definition>
        <argsstring>()</argsstring>
        <name>publish_service</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Should be called by sub-classes when they have finished initializing and are ready to go public. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/command.h" line="159"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_command_1a101ed477d16883d1ff713f87c726025e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void oscit::Command::receive</definition>
        <argsstring>(const Url &amp;url, const Value &amp;val)</argsstring>
        <name>receive</name>
        <reimplementedby refid="classoscit_1_1_osc_map_command_1a99a1043b021b4dd391f8df4b1375b7a2">receive</reimplementedby>
        <param>
          <type>const <ref refid="classoscit_1_1_url" kindref="compound">Url</ref> &amp;</type>
          <declname>url</declname>
        </param>
        <param>
          <type>const <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method is called whenever the command receives a new message. Executed within mutex lock from the command&apos;s own thread. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/command.h" line="165"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_command_1a0b4eef6dba0ecb21f1c265a5ff1bfe1a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void oscit::Command::send_message</definition>
        <argsstring>(const Location &amp;remote_endpoint, const char *path, const Value &amp;val)=0</argsstring>
        <name>send_message</name>
        <reimplementedby refid="classoscit_1_1_osc_command_1ad18b8c85a97ba892df54f387c7904f40">send_message</reimplementedby>
        <param>
          <type>const <ref refid="classoscit_1_1_location" kindref="compound">Location</ref> &amp;</type>
          <declname>remote_endpoint</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method must be implemented in subclasses to actually send values to the remote endpoint. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/command.h" line="170"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_command_1a10d0ac61ce77a53b507beb92c09b59ff" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void oscit::Command::set_root</definition>
        <argsstring>(Root *root)</argsstring>
        <name>set_root</name>
        <param>
          <type><ref refid="classoscit_1_1_root" kindref="compound">Root</ref> *</type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Should only be used by <ref refid="classoscit_1_1_root" kindref="compound">Root</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/command.h" line="174" bodyfile="/Users/gaspard/git/oscit/include/oscit/command.h" bodystart="174" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_command_1a961fff7c9c26ce110041384bf3f8314a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool oscit::Command::build_remote_object</definition>
        <argsstring>(const Url &amp;remote_url, Value *error, ObjectHandle *handle)=0</argsstring>
        <name>build_remote_object</name>
        <reimplementedby refid="classoscit_1_1_osc_command_1a58cf9b3e3a4d1e2e704b96b272dfb4ec">build_remote_object</reimplementedby>
        <param>
          <type>const <ref refid="classoscit_1_1_url" kindref="compound">Url</ref> &amp;</type>
          <declname>remote_url</declname>
        </param>
        <param>
          <type><ref refid="classoscit_1_1_value" kindref="compound">Value</ref> *</type>
          <declname>error</declname>
        </param>
        <param>
          <type><ref refid="classoscit_1_1_object_handle" kindref="compound">ObjectHandle</ref> *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Build an object to communicate with a remote endpoint. FIXME: maybe we do not need this since we have RootPoxy... </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/command.h" line="179"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_command_1a1aed8ef969789ccd4cf1453ea7bf5609" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void oscit::Command::listen</definition>
        <argsstring>()=0</argsstring>
        <name>listen</name>
        <reimplementedby refid="classoscit_1_1_osc_command_1a03e06431c791d4fc67c045748874ccff">listen</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Listen for commands (in new thread). Should call &quot;thread_ready()&quot; when it has finished initializing. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/command.h" line="184"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_command_1a5b21956a255ef7745080ec997a2e94b1" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T* oscit::Command::adopt_remote_object</definition>
        <argsstring>(const std::string &amp;path, T *object)</argsstring>
        <name>adopt_remote_object</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>FIXME: maybe we do not need this since we have RootPoxy... </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/command.h" line="189" bodyfile="/Users/gaspard/git/oscit/include/oscit/command.h" bodystart="189" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_command_1a787fb18ee41c02998374156dc7666784" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::list&lt; <ref refid="classoscit_1_1_location" kindref="compound">Location</ref> &gt; &amp;</type>
        <definition>const std::list&lt;Location&gt;&amp; oscit::Command::observers</definition>
        <argsstring>() const </argsstring>
        <name>observers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the list of locations observing through this command. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/command.h" line="207" bodyfile="/Users/gaspard/git/oscit/include/oscit/command.h" bodystart="207" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_command_1a51e05a4579088c31d3815b0328a52da8" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool oscit::Command::handle_register_message</definition>
        <argsstring>(const Url &amp;url, const Value &amp;val)</argsstring>
        <name>handle_register_message</name>
        <param>
          <type>const <ref refid="classoscit_1_1_url" kindref="compound">Url</ref> &amp;</type>
          <declname>url</declname>
        </param>
        <param>
          <type>const <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Handle &apos;/.register&apos; messages. This method should be called from within &apos;receive&apos;. The method adds a new satellite to the list of observers. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/command.h" line="214"/>
      </memberdef>
      <memberdef kind="function" id="classoscit_1_1_command_1a7bd106ee15dcfa25639f96dea69ea2db" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool oscit::Command::handle_reply_message</definition>
        <argsstring>(const Url &amp;url, const Value &amp;val)</argsstring>
        <name>handle_reply_message</name>
        <param>
          <type>const <ref refid="classoscit_1_1_url" kindref="compound">Url</ref> &amp;</type>
          <declname>url</declname>
        </param>
        <param>
          <type>const <ref refid="classoscit_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Handle &apos;/.reply&apos; messages. This method should be called from within &apos;receive&apos;. <simplesect kind="return"><para>true if the message was a &apos;/.reply&apos; and it does not need any further processing </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/oscit/include/oscit/command.h" line="219"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This class is responsible for listening to any kind of incoming command (implemented by subclasses in do_listen) and passing these commands to the root object.</para><para>If you do not want the command to publish a service, set service_type to &quot;&quot; (blank). </para>    </detaileddescription>
    <inheritancegraph>
      <node id="120">
        <label>oscit::OscMapCommand</label>
        <link refid="classoscit_1_1_osc_map_command"/>
        <childnode refid="119" relation="public-inheritance">
        </childnode>
      </node>
      <node id="116">
        <label>oscit::Mutex</label>
        <link refid="classoscit_1_1_mutex"/>
        <childnode refid="117" relation="public-inheritance">
        </childnode>
        <childnode refid="118" relation="private-inheritance">
        </childnode>
      </node>
      <node id="115">
        <label>oscit::Thread</label>
        <link refid="classoscit_1_1_thread"/>
        <childnode refid="116" relation="public-inheritance">
        </childnode>
      </node>
      <node id="118">
        <label>oscit::NonCopyable</label>
        <link refid="classoscit_1_1_non_copyable"/>
      </node>
      <node id="119">
        <label>oscit::OscCommand</label>
        <link refid="classoscit_1_1_osc_command"/>
        <childnode refid="114" relation="public-inheritance">
        </childnode>
      </node>
      <node id="117">
        <label>oscit::Typed</label>
        <link refid="classoscit_1_1_typed"/>
      </node>
      <node id="114">
        <label>oscit::Command</label>
        <link refid="classoscit_1_1_command"/>
        <childnode refid="115" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="127">
        <label>oscit::Root</label>
        <link refid="classoscit_1_1_root"/>
        <childnode refid="128" relation="public-inheritance">
        </childnode>
        <childnode refid="134" relation="usage">
          <edgelabel>objects_</edgelabel>
        </childnode>
        <childnode refid="149" relation="usage">
          <edgelabel>callbacks_on_register_</edgelabel>
        </childnode>
        <childnode refid="151" relation="usage">
          <edgelabel>commands_</edgelabel>
        </childnode>
      </node>
      <node id="143">
        <label>Matrix</label>
        <link refid="class_matrix"/>
      </node>
      <node id="149">
        <label>oscit::CTHash&lt; std::string, CallbackList * &gt;</label>
        <link refid="classoscit_1_1_c_t_hash"/>
        <childnode refid="150" relation="public-inheritance">
        </childnode>
        <childnode refid="136" relation="public-inheritance">
        </childnode>
      </node>
      <node id="123">
        <label>oscit::Mutex</label>
        <link refid="classoscit_1_1_mutex"/>
        <childnode refid="124" relation="public-inheritance">
        </childnode>
        <childnode refid="125" relation="private-inheritance">
        </childnode>
      </node>
      <node id="156">
        <label>oscit::THash&lt; std::string, Object * &gt;</label>
        <link refid="classoscit_1_1_t_hash"/>
        <childnode refid="157" relation="usage">
          <edgelabel>thash_table_</edgelabel>
        </childnode>
      </node>
      <node id="142">
        <label>oscit::List</label>
        <link refid="classoscit_1_1_list"/>
        <childnode refid="139" relation="public-inheritance">
        </childnode>
      </node>
      <node id="158">
        <label>oscit::THash&lt; Location, RootProxy * &gt;</label>
        <link refid="classoscit_1_1_t_hash"/>
        <childnode refid="159" relation="usage">
          <edgelabel>thash_table_</edgelabel>
        </childnode>
      </node>
      <node id="137">
        <label>oscit::Value</label>
        <link refid="classoscit_1_1_value"/>
        <childnode refid="138" relation="usage">
          <edgelabel>midi_message_</edgelabel>
        </childnode>
        <childnode refid="140" relation="usage">
          <edgelabel>string_</edgelabel>
        </childnode>
        <childnode refid="141" relation="usage">
          <edgelabel>error_</edgelabel>
        </childnode>
        <childnode refid="142" relation="usage">
          <edgelabel>list_</edgelabel>
        </childnode>
        <childnode refid="143" relation="usage">
          <edgelabel>matrix_</edgelabel>
        </childnode>
        <childnode refid="144" relation="usage">
          <edgelabel>hash_</edgelabel>
        </childnode>
      </node>
      <node id="135">
        <label>oscit::THash&lt; std::string,Object * &gt;</label>
        <link refid="classoscit_1_1_t_hash"/>
      </node>
      <node id="122">
        <label>oscit::Thread</label>
        <link refid="classoscit_1_1_thread"/>
        <childnode refid="123" relation="public-inheritance">
        </childnode>
        <childnode refid="126" relation="usage">
          <edgelabel>semaphore_</edgelabel>
        </childnode>
      </node>
      <node id="159">
        <label>oscit::THashElement&lt; Location, RootProxy * &gt;</label>
        <link refid="structoscit_1_1_t_hash_element"/>
        <childnode refid="160" relation="usage">
          <edgelabel>obj</edgelabel>
        </childnode>
        <childnode refid="159" relation="usage">
          <edgelabel>next</edgelabel>
        </childnode>
        <childnode refid="155" relation="usage">
          <edgelabel>key</edgelabel>
        </childnode>
      </node>
      <node id="138">
        <label>oscit::MidiMessage</label>
        <link refid="classoscit_1_1_midi_message"/>
        <childnode refid="139" relation="public-inheritance">
        </childnode>
      </node>
      <node id="146">
        <label>oscit::THashElement&lt; std::string, Value &gt;</label>
        <link refid="structoscit_1_1_t_hash_element"/>
        <childnode refid="146" relation="usage">
          <edgelabel>next</edgelabel>
        </childnode>
        <childnode refid="137" relation="usage">
          <edgelabel>obj</edgelabel>
        </childnode>
      </node>
      <node id="125">
        <label>oscit::NonCopyable</label>
        <link refid="classoscit_1_1_non_copyable"/>
      </node>
      <node id="162">
        <label>oscit::ZeroConfRegistration</label>
        <link refid="classoscit_1_1_zero_conf_registration"/>
        <childnode refid="123" relation="public-inheritance">
        </childnode>
      </node>
      <node id="157">
        <label>oscit::THashElement&lt; std::string, Object * &gt;</label>
        <link refid="structoscit_1_1_t_hash_element"/>
        <childnode refid="157" relation="usage">
          <edgelabel>next</edgelabel>
        </childnode>
        <childnode refid="128" relation="usage">
          <edgelabel>obj</edgelabel>
        </childnode>
      </node>
      <node id="152">
        <label>std::list&lt;Command * &gt;</label>
        <link refid="classstd_1_1list"/>
      </node>
      <node id="153">
        <label>oscit::THash&lt; Location, unsigned int &gt;</label>
        <link refid="classoscit_1_1_t_hash"/>
        <childnode refid="154" relation="usage">
          <edgelabel>thash_table_</edgelabel>
        </childnode>
      </node>
      <node id="148">
        <label>std::vector&lt;Object * &gt;</label>
        <link refid="classstd_1_1vector"/>
      </node>
      <node id="150">
        <label>oscit::THash&lt; std::string,CallbackList * &gt;</label>
        <link refid="classoscit_1_1_t_hash"/>
      </node>
      <node id="151">
        <label>oscit::CTList&lt; Command * &gt;</label>
        <link refid="classoscit_1_1_c_t_list"/>
        <childnode refid="152" relation="public-inheritance">
        </childnode>
        <childnode refid="136" relation="public-inheritance">
        </childnode>
      </node>
      <node id="160">
        <label>oscit::RootProxy</label>
        <link refid="classoscit_1_1_root_proxy"/>
        <childnode refid="127" relation="public-inheritance">
        </childnode>
        <childnode refid="161" relation="usage">
          <edgelabel>proxy_factory_</edgelabel>
        </childnode>
        <childnode refid="121" relation="usage">
          <edgelabel>command_</edgelabel>
        </childnode>
        <childnode refid="155" relation="usage">
          <edgelabel>remote_location_</edgelabel>
        </childnode>
      </node>
      <node id="129">
        <label>oscit::Observable</label>
        <link refid="classoscit_1_1_observable"/>
        <childnode refid="130" relation="public-inheritance">
        </childnode>
        <childnode refid="131" relation="usage">
          <edgelabel>destruction_notifier_</edgelabel>
        </childnode>
      </node>
      <node id="131">
        <label>oscit::OnDestroyNotifier</label>
        <link refid="classoscit_1_1_on_destroy_notifier"/>
        <childnode refid="132" relation="public-inheritance">
        </childnode>
        <childnode refid="132" relation="public-inheritance">
        </childnode>
      </node>
      <node id="130">
        <label>oscit::Observer</label>
        <link refid="classoscit_1_1_observer"/>
      </node>
      <node id="126">
        <label>oscit::Semaphore</label>
        <link refid="classoscit_1_1_semaphore"/>
        <childnode refid="125" relation="private-inheritance">
        </childnode>
        <childnode refid="123" relation="usage">
          <edgelabel>acquire_mutex_</edgelabel>
        </childnode>
      </node>
      <node id="133">
        <label>oscit::CReferenceCounted</label>
        <link refid="classoscit_1_1_c_reference_counted"/>
        <childnode refid="125" relation="private-inheritance">
        </childnode>
      </node>
      <node id="128">
        <label>oscit::Object</label>
        <link refid="classoscit_1_1_object"/>
        <childnode refid="124" relation="public-inheritance">
        </childnode>
        <childnode refid="129" relation="public-inheritance">
        </childnode>
        <childnode refid="133" relation="public-inheritance">
        </childnode>
        <childnode refid="134" relation="usage">
          <edgelabel>children_</edgelabel>
        </childnode>
        <childnode refid="127" relation="usage">
          <edgelabel>root_</edgelabel>
        </childnode>
        <childnode refid="137" relation="usage">
          <edgelabel>type_</edgelabel>
        </childnode>
        <childnode refid="147" relation="usage">
          <edgelabel>children_vector_</edgelabel>
        </childnode>
        <childnode refid="123" relation="usage">
          <edgelabel>context_</edgelabel>
        </childnode>
        <childnode refid="128" relation="usage">
          <edgelabel>parent_</edgelabel>
        </childnode>
      </node>
      <node id="141">
        <label>oscit::Error</label>
        <link refid="classoscit_1_1_error"/>
        <childnode refid="139" relation="public-inheritance">
        </childnode>
      </node>
      <node id="145">
        <label>oscit::THash&lt; std::string, Value &gt;</label>
        <link refid="classoscit_1_1_t_hash"/>
        <childnode refid="146" relation="usage">
          <edgelabel>thash_table_</edgelabel>
        </childnode>
      </node>
      <node id="155">
        <label>oscit::Location</label>
        <link refid="classoscit_1_1_location"/>
      </node>
      <node id="134">
        <label>oscit::CTHash&lt; std::string, Object * &gt;</label>
        <link refid="classoscit_1_1_c_t_hash"/>
        <childnode refid="135" relation="public-inheritance">
        </childnode>
        <childnode refid="136" relation="public-inheritance">
        </childnode>
      </node>
      <node id="124">
        <label>oscit::Typed</label>
        <link refid="classoscit_1_1_typed"/>
      </node>
      <node id="144">
        <label>oscit::Hash</label>
        <link refid="classoscit_1_1_hash"/>
        <childnode refid="139" relation="public-inheritance">
        </childnode>
        <childnode refid="145" relation="public-inheritance">
        </childnode>
      </node>
      <node id="139">
        <label>oscit::ReferenceCounted</label>
        <link refid="classoscit_1_1_reference_counted"/>
      </node>
      <node id="154">
        <label>oscit::THashElement&lt; Location, unsigned int &gt;</label>
        <link refid="structoscit_1_1_t_hash_element"/>
        <childnode refid="154" relation="usage">
          <edgelabel>next</edgelabel>
        </childnode>
        <childnode refid="155" relation="usage">
          <edgelabel>key</edgelabel>
        </childnode>
      </node>
      <node id="121">
        <label>oscit::Command</label>
        <link refid="classoscit_1_1_command"/>
        <childnode refid="122" relation="public-inheritance">
        </childnode>
        <childnode refid="127" relation="usage">
          <edgelabel>root_</edgelabel>
        </childnode>
        <childnode refid="153" relation="usage">
          <edgelabel>observers_</edgelabel>
        </childnode>
        <childnode refid="156" relation="usage">
          <edgelabel>remote_objects_</edgelabel>
        </childnode>
        <childnode refid="158" relation="usage">
          <edgelabel>root_proxies_</edgelabel>
        </childnode>
        <childnode refid="162" relation="usage">
          <edgelabel>zeroconf_registration_</edgelabel>
        </childnode>
      </node>
      <node id="147">
        <label>oscit::CTVector&lt; Object * &gt;</label>
        <link refid="classoscit_1_1_c_t_vector"/>
        <childnode refid="148" relation="public-inheritance">
        </childnode>
        <childnode refid="136" relation="public-inheritance">
        </childnode>
      </node>
      <node id="136">
        <label>oscit::RWMutex</label>
        <link refid="classoscit_1_1_r_w_mutex"/>
      </node>
      <node id="132">
        <label>oscit::CallbackList</label>
        <link refid="classoscit_1_1_callback_list"/>
        <childnode refid="125" relation="private-inheritance">
        </childnode>
        <childnode refid="130" relation="usage">
          <edgelabel>list_owner_</edgelabel>
        </childnode>
      </node>
      <node id="161">
        <label>oscit::ProxyFactory</label>
        <link refid="classoscit_1_1_proxy_factory"/>
      </node>
      <node id="140">
        <label>oscit::StringData</label>
        <link refid="classoscit_1_1_string_data"/>
        <childnode refid="139" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/Users/gaspard/git/oscit/include/oscit/command.h" line="55" bodyfile="/Users/gaspard/git/oscit/include/oscit/command.h" bodystart="55" bodyend="251"/>
    <listofallmembers>
      <member refid="classoscit_1_1_command_1af6251b0ea9670a79aed81d12b428bbb5" prot="public" virt="non-virtual"><scope>oscit::Command</scope><name>adopt_proxy</name></member>
      <member refid="classoscit_1_1_command_1a5b21956a255ef7745080ec997a2e94b1" prot="protected" virt="non-virtual"><scope>oscit::Command</scope><name>adopt_remote_object</name></member>
      <member refid="classoscit_1_1_command_1a961fff7c9c26ce110041384bf3f8314a" prot="protected" virt="pure-virtual"><scope>oscit::Command</scope><name>build_remote_object</name></member>
      <member refid="classoscit_1_1_typed_1a9d91142c1ff172635833f4b2a06d5d3b" prot="public" virt="non-virtual"><scope>oscit::Command</scope><name>class_name</name></member>
      <member refid="classoscit_1_1_command_1a70b392e3ac51ccee3ce820368becc73b" prot="public" virt="non-virtual"><scope>oscit::Command</scope><name>Command</name></member>
      <member refid="classoscit_1_1_command_1af193c0c45836ae7bed2f2b9ef6568e85" prot="public" virt="non-virtual"><scope>oscit::Command</scope><name>Command</name></member>
      <member refid="classoscit_1_1_command_1a226db1d0b0072f75dadf24398ba2e2b5" prot="public" virt="non-virtual"><scope>oscit::Command</scope><name>Command</name></member>
      <member refid="classoscit_1_1_command_1a9c38503c8afca833ce5db5c0f54f7bb9" prot="public" virt="non-virtual"><scope>oscit::Command</scope><name>Command</name></member>
      <member refid="classoscit_1_1_command_1a92cf49967065f161388462d920e175d2" prot="protected" virt="non-virtual"><scope>oscit::Command</scope><name>CommandTest</name></member>
      <member refid="classoscit_1_1_command_1a9c21ba78ff43955d2e353b585f6766e4" prot="public" virt="non-virtual"><scope>oscit::Command</scope><name>find_proxy</name></member>
      <member refid="classoscit_1_1_command_1a51e05a4579088c31d3815b0328a52da8" prot="protected" virt="non-virtual"><scope>oscit::Command</scope><name>handle_register_message</name></member>
      <member refid="classoscit_1_1_command_1a7bd106ee15dcfa25639f96dea69ea2db" prot="protected" virt="non-virtual"><scope>oscit::Command</scope><name>handle_reply_message</name></member>
      <member refid="classoscit_1_1_thread_1aaad5213036214bf55dbcaf532d0b528e" prot="public" virt="non-virtual"><scope>oscit::Command</scope><name>high_priority</name></member>
      <member refid="classoscit_1_1_typed_1a4aba9ae57b258b6d678c685d190ec281" prot="public" virt="non-virtual"><scope>oscit::Command</scope><name>is_a</name></member>
      <member refid="classoscit_1_1_thread_1aee8748532b84f6c7468b143322883597" prot="public" virt="non-virtual"><scope>oscit::Command</scope><name>join</name></member>
      <member refid="classoscit_1_1_command_1af728901301393d2a74e1f6f3d8fd4bf2" prot="public" virt="virtual"><scope>oscit::Command</scope><name>kill</name></member>
      <member refid="classoscit_1_1_command_1a1aed8ef969789ccd4cf1453ea7bf5609" prot="protected" virt="pure-virtual"><scope>oscit::Command</scope><name>listen</name></member>
      <member refid="classoscit_1_1_mutex_1a016dda2b6b467aa8e3a866be3bd0f86e" prot="public" virt="non-virtual"><scope>oscit::Command</scope><name>lock</name></member>
      <member refid="classoscit_1_1_thread_1a40c15a9203e95fa9e1888a678d581be0" prot="public" virt="non-virtual"><scope>oscit::Command</scope><name>millisleep</name></member>
      <member refid="classoscit_1_1_mutex_1ae41e751604af40fc4ed78d16c63be52f" prot="public" virt="non-virtual"><scope>oscit::Command</scope><name>Mutex</name></member>
      <member refid="classoscit_1_1_thread_1a0c51ff3a71ef65bfbef2da36528a9508" prot="public" virt="non-virtual"><scope>oscit::Command</scope><name>normal_priority</name></member>
      <member refid="classoscit_1_1_command_1a3b16a321db36dce14529bac5ff8cd92e" prot="public" virt="pure-virtual"><scope>oscit::Command</scope><name>notify_observers</name></member>
      <member refid="classoscit_1_1_command_1a787fb18ee41c02998374156dc7666784" prot="protected" virt="non-virtual"><scope>oscit::Command</scope><name>observers</name></member>
      <member refid="classoscit_1_1_command_1a70b59ce9486b42456e0197858b905f39" prot="private" virt="non-virtual"><scope>oscit::Command</scope><name>observers_</name></member>
      <member refid="classoscit_1_1_thread_1a668701b16f7e18eef3d324401877be66" prot="public" virt="non-virtual"><scope>oscit::Command</scope><name>parameter_</name></member>
      <member refid="classoscit_1_1_command_1a4b897b305e935c8cf58734dac6f882a7" prot="public" virt="non-virtual"><scope>oscit::Command</scope><name>port</name></member>
      <member refid="classoscit_1_1_command_1a213b745a3507b14283c076decef84604" prot="protected" virt="non-virtual"><scope>oscit::Command</scope><name>port_</name></member>
      <member refid="classoscit_1_1_command_1a89cbe68fec95d8105f45ead7f34d4383" prot="public" virt="non-virtual"><scope>oscit::Command</scope><name>protocol</name></member>
      <member refid="classoscit_1_1_command_1a11fd1fceb5a9e67f8ff24153e7c46a30" prot="private" virt="non-virtual"><scope>oscit::Command</scope><name>protocol_</name></member>
      <member refid="classoscit_1_1_command_1a82283a6a862f215f963ca19da9a91311" prot="protected" virt="non-virtual"><scope>oscit::Command</scope><name>publish_service</name></member>
      <member refid="classoscit_1_1_thread_1ada993f1c96a4f1cc51b5b69f6cb5d6b0" prot="public" virt="non-virtual"><scope>oscit::Command</scope><name>quit</name></member>
      <member refid="classoscit_1_1_command_1a101ed477d16883d1ff713f87c726025e" prot="protected" virt="virtual"><scope>oscit::Command</scope><name>receive</name></member>
      <member refid="classoscit_1_1_command_1a75f3f19b243873c75f167bbefe4dd056" prot="protected" virt="non-virtual"><scope>oscit::Command</scope><name>register_proxy</name></member>
      <member refid="classoscit_1_1_command_1a581299bb4c1274dd543b4dc4a4d06e74" prot="public" virt="non-virtual"><scope>oscit::Command</scope><name>remote_object</name></member>
      <member refid="classoscit_1_1_command_1a88e892bece3544d379c69d83ee3f5e6e" prot="protected" virt="non-virtual"><scope>oscit::Command</scope><name>remote_objects_</name></member>
      <member refid="classoscit_1_1_command_1a4966338964dbcd90cba2a6b4bd1b3521" prot="protected" virt="non-virtual"><scope>oscit::Command</scope><name>Root</name></member>
      <member refid="classoscit_1_1_command_1adfdef7bf6f6015137169119a63166595" prot="protected" virt="non-virtual"><scope>oscit::Command</scope><name>root_</name></member>
      <member refid="classoscit_1_1_command_1af5bc686795369b38f60dda59375905b4" prot="private" virt="non-virtual"><scope>oscit::Command</scope><name>root_proxies_</name></member>
      <member refid="classoscit_1_1_command_1adb1f2142cbdbf8c3ad4c69c49aa26080" prot="public" virt="non-virtual"><scope>oscit::Command</scope><name>root_proxies_count</name></member>
      <member refid="classoscit_1_1_command_1a31cf9ebf3c6efeb062f871270c52a8d9" prot="private" virt="non-virtual"><scope>oscit::Command</scope><name>root_proxies_vector_</name></member>
      <member refid="classoscit_1_1_command_1ad3e90debf6a11f4c7faf23b155e099dd" prot="public" virt="non-virtual"><scope>oscit::Command</scope><name>root_proxy_at_index</name></member>
      <member refid="classoscit_1_1_command_1a4dcd2aff114d1a9cc923a9cbb1aabe81" prot="protected" virt="non-virtual"><scope>oscit::Command</scope><name>RootProxy</name></member>
      <member refid="classoscit_1_1_thread_1ab82f6e51badc2bee9b2693d984add161" prot="public" virt="non-virtual"><scope>oscit::Command</scope><name>semaphore</name></member>
      <member refid="classoscit_1_1_command_1a1a7b550f6ddcbe69194c4f7be5978c7e" prot="public" virt="non-virtual"><scope>oscit::Command</scope><name>send</name></member>
      <member refid="classoscit_1_1_command_1ad4f0a8844c29d34c94a7d4fed92ff5d9" prot="public" virt="non-virtual"><scope>oscit::Command</scope><name>send</name></member>
      <member refid="classoscit_1_1_command_1a0b4eef6dba0ecb21f1c265a5ff1bfe1a" prot="protected" virt="pure-virtual"><scope>oscit::Command</scope><name>send_message</name></member>
      <member refid="classoscit_1_1_thread_1a3b5b22e665dc684be5c6a98c9b404968" prot="public" virt="non-virtual"><scope>oscit::Command</scope><name>send_signal</name></member>
      <member refid="classoscit_1_1_command_1afe3551f60e73308b5c318c2822e57980" prot="private" virt="non-virtual"><scope>oscit::Command</scope><name>service_type_</name></member>
      <member refid="classoscit_1_1_command_1aa685ec9ee1e4b3e7a36d78d2be997c2b" prot="protected" virt="non-virtual"><scope>oscit::Command</scope><name>set_port</name></member>
      <member refid="classoscit_1_1_command_1a10d0ac61ce77a53b507beb92c09b59ff" prot="protected" virt="non-virtual"><scope>oscit::Command</scope><name>set_root</name></member>
      <member refid="classoscit_1_1_thread_1a835cce43082e48865d64d9724733c385" prot="public" virt="non-virtual"><scope>oscit::Command</scope><name>should_run</name></member>
      <member refid="classoscit_1_1_thread_1ac14a7771b2b20e79b5de860e69880386" prot="protected" virt="non-virtual"><scope>oscit::Command</scope><name>should_run_</name></member>
      <member refid="classoscit_1_1_command_1a81f74e6363bdd10f969e3edd4ae31175" prot="public" virt="non-virtual"><scope>oscit::Command</scope><name>start_command</name></member>
      <member refid="classoscit_1_1_thread_1a8ff725bd92baa91a1af56f2220402687" prot="public" virt="non-virtual"><scope>oscit::Command</scope><name>start_thread</name></member>
      <member refid="classoscit_1_1_thread_1a75a606dfb4fdae23dc691b4ff9c575b3" prot="public" virt="non-virtual"><scope>oscit::Command</scope><name>start_thread</name></member>
      <member refid="classoscit_1_1_thread_1a865b8ceed25d894de9e055c1c6db1324" prot="public" virt="non-virtual"><scope>oscit::Command</scope><name>start_thread</name></member>
      <member refid="classoscit_1_1_thread_1a865b8ceed25d894de9e055c1c6db1324" prot="public" virt="non-virtual"><scope>oscit::Command</scope><name>start_thread</name></member>
      <member refid="classoscit_1_1_thread_1a3ef55ef30cb89b171a7fc2596a79ab7c" prot="public" virt="non-virtual"><scope>oscit::Command</scope><name>sThisKey</name></member>
      <member refid="classoscit_1_1_thread_1aaf0789bf491951f40956bddef73a2ea7" prot="public" virt="non-virtual"><scope>oscit::Command</scope><name>Thread</name></member>
      <member refid="classoscit_1_1_thread_1a0e8495bb727bccd28d1bc0fdc4f332f1" prot="public" virt="non-virtual"><scope>oscit::Command</scope><name>thread_ready</name></member>
      <member refid="classoscit_1_1_thread_1af9e624afe0741e2376366518f53a827e" prot="public" virt="non-virtual"><scope>oscit::Command</scope><name>thread_this</name></member>
      <member refid="classoscit_1_1_typed_1a72ecaff553f3b9028dd57afee597dc44" prot="public" virt="non-virtual"><scope>oscit::Command</scope><name>type_cast</name></member>
      <member refid="classoscit_1_1_mutex_1a4eb03cce21055fcfd8ae3462661fac6f" prot="public" virt="non-virtual"><scope>oscit::Command</scope><name>unlock</name></member>
      <member refid="classoscit_1_1_command_1a13388867c17c7a6b6140b340cb0627d4" prot="protected" virt="non-virtual"><scope>oscit::Command</scope><name>unregister_proxy</name></member>
      <member refid="classoscit_1_1_command_1af61802fc9c318182f0ebd32e2a6c9cc5" prot="private" virt="non-virtual"><scope>oscit::Command</scope><name>zeroconf_registration_</name></member>
      <member refid="classoscit_1_1_command_1ab945e18104440e336a0ad4cf440d20f7" prot="public" virt="virtual"><scope>oscit::Command</scope><name>~Command</name></member>
      <member refid="classoscit_1_1_mutex_1abc6c403ed2bd809dead4e1307e18cc65" prot="public" virt="virtual"><scope>oscit::Command</scope><name>~Mutex</name></member>
      <member refid="classoscit_1_1_thread_1aae027cef80dc02fc408320f52f441080" prot="public" virt="virtual"><scope>oscit::Command</scope><name>~Thread</name></member>
      <member refid="classoscit_1_1_typed_1ab92fb67d52050227718772b14f74b1b6" prot="public" virt="virtual"><scope>oscit::Command</scope><name>~Typed</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
